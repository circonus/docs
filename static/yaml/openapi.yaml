openapi: 3.0.2
info:
  title: Circonus Application Programming Interface
  description: >
    The Circonus API provides an interface to programmatically access the
    functionality of the Circonus system.
servers:
  - url: "https://api.circonus.com"
security:
  - App-Name: []
    Auth-Token: []
paths:
  /account/current:
    get:
      tags:
        - Account
      summary: Retrieves account object for the account this API token is associated with.
      responses:
        "200":
          description: >
            Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Account
      summary: Updates details for the current account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Account"
      responses:
        "200":
          description: >
            A json object containing details about the account.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /account/{id}:
    parameters:
      - $ref: "#/components/parameters/objectPathId"
    get:
      tags:
        - Account
      summary: Retrieves details for a specific account.
      responses:
        "200":
          description: >
            A json object containing details about the account.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Account
      summary: Updates details for a specific account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Account"
      responses:
        "200":
          description: >
            A json object containing details about the account.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /acknowledgement:
    get:
      parameters:
        - $ref: "#/components/parameters/searchParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/sortParam"
        - $ref: "#/components/parameters/sortDirParam"
      tags:
        - Acknowledgement
      summary: Retrieves acknowledgements for the current account.
      responses:
        "200":
          description: >
            An array containing acknowledgements associated with the request account, or narrowed using search and pagination parameters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Acknowledgement"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Acknowledgement
      summary: Creates a new acknowledgement.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Acknowledgement"
      responses:
        "200":
          description: >
            A json object containing details about the acknowledgement.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Acknowledgement"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /acknowledgement/{id}:
    parameters:
      - $ref: "#/components/parameters/objectPathId"
    get:
      tags:
        - Acknowledgement
      summary: Retrieves details for a specific acknowledgement.
      responses:
        "200":
          description: >
            A json object containing details about the acknowledgement.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Acknowledgement"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Acknowledgement
      summary: Updates details for a specific acknowledgement.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Acknowledgement"
      responses:
        "200":
          description: >
            A json object containing details about the acknowledgement.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Acknowledgement"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /alert:
    get:
      parameters:
        - $ref: "#/components/parameters/searchParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/sortParam"
        - $ref: "#/components/parameters/sortDirParam"
      tags:
        - Alert
      summary: Fetch an array of all active alerts. By default only active alerts are searched or returned, but inactive alerts can be searched by specifiying `search=(active:false)` in the search terms.
      responses:
        "200":
          description: >
            An array of alert objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Alert"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /alert/{id}:
    parameters:
      - $ref: "#/components/parameters/objectPathId"
    get:
      tags:
        - Alert
      summary: Retrieves details for a specific alert.
      responses:
        "200":
          description: >
            A json object containing details about the alert.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Alert"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /annotation:
    get:
      parameters:
        - $ref: "#/components/parameters/searchParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/sortParam"
        - $ref: "#/components/parameters/sortDirParam"
      tags:
        - Annotation
      summary: Retrieves annotations for the current account.
      responses:
        "200":
          description: >
            An array containing annotations associated with the request account, or narrowed using search and pagination parameters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Annotation"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Annotation
      summary: Creates a new annotation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Annotation"
      responses:
        "200":
          description: >
            A json object containing details about the annotation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Annotation"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /annotation/{id}:
    parameters:
      - $ref: "#/components/parameters/objectPathId"
    get:
      tags:
        - Annotation
      summary: Retrieves details for a specific annotation.
      responses:
        "200":
          description: >
            A json object containing details about the annotation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Annotation"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Annotation
      summary: Updates details for a specific annotation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Annotation"
      responses:
        "200":
          description: >
            A json object containing details about the annotation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Annotation"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Annotation
      summary: Removes the specified annotation.
      responses:
        "200":
          description: >
            The annotation was successfully removed.
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /broker:
    get:
      parameters:
        - $ref: "#/components/parameters/searchParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/sortParam"
        - $ref: "#/components/parameters/sortDirParam"
      tags:
        - Broker
      summary: Retrieves broker configuration details for the current account.
      description: >
        Retrieves the configuration details for brokers used by the account that
        initiated the API request. Accepts search and pagination parameters for
        narrowing the available results.
      responses:
        "200":
          description: >
            An array containing broker configuration information for all
            brokers associated with the request account, or narrowed using
            search and pagination parameters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Broker"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /broker/{id}:
    get:
      tags:
        - Broker
      summary: Retrieves details for the specified broker by ID.
      description: >
        Retrieves the configuration details for a broker specified by the ID
        in the request path.
      parameters:
        - in: path
          name: id
          description: >
            The broker ID of the configuration details to retrieve.
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        "200":
          description: Broker configuration information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Broker"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /caql:
    get:
      tags:
        - CAQL
      summary: Run a CAQL query and return the data results.  CAQL documentation can be found at https://docs.circonus.com/caql/
      parameters:
        - in: query
          name: query
          schema:
            type: string
          required: true
          description: >
            A well-formed CAQL query
        - in: query
          name: start
          schema:
            type: integer
            default: 60 seconds before the 'end' value
          description: The start time, in epoch seconds, of the period you wish to query data from
        - in: query
          name: end
          schema:
            type: integer
            default: 5 minutes before the current time, rounded to the nearest minute
          description: The end time, in epoch seconds, of the period you wish to query data from
        - in: query
          name: period
          schema:
            type: integer
            default: 60
          description: The resolution of data, in seconds, you want to get back
      responses:
        "200":
          description: >
            The query results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CAQLResponse"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /check:
    get:
      parameters:
        - $ref: "#/components/parameters/searchParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/sortParam"
        - $ref: "#/components/parameters/sortDirParam"
      tags:
        - Check
      summary: Fetch an array of checks.
      responses:
        "200":
          description: >
            An array containing checks, potentially narrowed using search and pagination parameters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Check"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /check/{id}:
    parameters:
      - $ref: "#/components/parameters/objectPathId"
    get:
      tags:
        - Check
      summary: Retrieves details for a specific check.
      responses:
        "200":
          description: >
            A json object containing details about the check.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Check"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /check_bundle:
    get:
      parameters:
        - $ref: "#/components/parameters/searchParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/sortParam"
        - $ref: "#/components/parameters/sortDirParam"
      tags:
        - Check Bundle
      summary: Fetch an array of check bundles.
      responses:
        "200":
          description: >
            An array containing check bundles, potentially narrowed using search and pagination parameters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CheckBundle"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      parameters:
        - in: query
          name: duplicate
          schema:
            type: integer
          description: If set to 1, tells the system to not do duplicate checking and always create the check.
        - in: query
          name: dedupe_params
          schema:
            type: string
            format: comma separated values
          description: >
            This takes a comma separated list of config values
            to use in the de-duplication comparison. This parameter will also take display_name to include
            the name in the comparison. Using this param with no values will use an empty list for comparison
            and in effect will only use target, brokers, and type.
      tags:
        - Check Bundle
      summary: >
        Creates a new check bundle.  During the creation process, new POST requests are de-duplicated
        against existing bundles. The criteria for considering a bundle duplicate is that is has the
        same target, brokers, type, and config as an existing bundle. Note that name is not considered
        when comparing bundles.  If a duplicate bundle is found, the existing bundle will be returned
        to your request unaltered. It is up to the client to make sure it is correct. To alter the
        bundle you must issue a PUT to the appropriate cid.  Two query string parameters can alter
        de-duplication behavior:  `duplicate` or `dedupe_params`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckBundle"
      responses:
        "200":
          description: >
            A json object containing details about the check bundle.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckBundle"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /check_bundle/{id}:
    parameters:
      - $ref: "#/components/parameters/objectPathId"
    get:
      tags:
        - Check Bundle
      parameters:
        - in: query
          name: query_broker
          schema:
            type: integer
          description: >
            If the query_broker=1 query parameter is passed the `metrics` field in the response will
            also include any additional metrics that are available for collection but are not currently active.
      summary: Retrieves details for a specific check bundle.
      responses:
        "200":
          description: >
            A json object containing details about the check bundle.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckBundle"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Check Bundle
      summary: Updates details for a specific check bundle.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckBundle"
      responses:
        "200":
          description: >
            A json object containing details about the check bundle.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckBundle"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Check Bundle
      summary: >
        You cannot completely remove check bundles from the system (the details of the check bundle will
        always be accessible by performing a GET on the check bundle's cid). However, you can hide the
        check bundle from the web interface and from API listings through this method.  Calling this is
        equivalent to setting the status to 'disabled'.
      responses:
        "200":
          description: >
            The check bundle was successfully disabled.
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /check_bundle_metrics/{id}:
    parameters:
      - $ref: "#/components/parameters/objectPathId"
    get:
      tags:
        - Check Bundle Metrics
      summary: Retrieves metric details for a specific check bundle.  This is a convenience method for check bundles.
      responses:
        "200":
          description: >
            A json object containing details about only the metrics on a check bundle.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckBundleMetrics"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Check Bundle Metrics
      summary: Updates metrics for a specific check bundle.  This is a convenience method for check bundles.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckBundleMetrics"
      responses:
        "200":
          description: >
            A json object containing details about the check bundle metrics.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckBundleMetrics"
        # TODO - docs for this say:  The response will contain the same list of metrics you submitted along with a result indicating the result of the operation ("success", "fail", "noop")
        # TODO - because of this likely we will have to evaluate every response for correctness.  Hopefully a swagger-based API tester will point these out.
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /check_move:
    get:
      parameters:
        - $ref: "#/components/parameters/searchParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/sortParam"
        - $ref: "#/components/parameters/sortDirParam"
      tags:
        - Check Move
      summary: Fetch a list of all pending move requests
      responses:
        "200":
          description: >
            An array containing check move objects, potentially narrowed using search and pagination parameters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CheckMove"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Check Move
      summary: Creates a new check move request.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckMove"
      responses:
        "200":
          description: >
            A json object containing details about the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckMove"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /check_move/{id}:
    parameters:
      - $ref: "#/components/parameters/objectPathId"
    get:
      tags:
        - Check Move
      summary: Retrieves details for a specific move request.
      responses:
        "200":
          description: >
            A json object containing details about the check move request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckMove"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Check Move
      summary: Updates details for a specific move request.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckMove"
      responses:
        "200":
          description: >
            A json object containing details about the move request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckMove"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Check Move
      summary: Removes the specified move request.
      responses:
        "200":
          description: >
            The move request was successfully removed.
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /contact_group:
    get:
      parameters:
        - $ref: "#/components/parameters/searchParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/sortParam"
        - $ref: "#/components/parameters/sortDirParam"
      tags:
        - Contact Group
      summary: Fetch a list of contact groups.
      responses:
        "200":
          description: >
            An array containing contact group objects, potentially narrowed using search and pagination parameters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContactGroup"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Contact Group
      summary: Creates a new contact group.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactGroup"
      responses:
        "200":
          description: >
            A json object containing details about the contact group.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactGroup"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /contact_group/{id}:
    parameters:
      - $ref: "#/components/parameters/objectPathId"
    get:
      tags:
        - Contact Group
      summary: Retrieves details for a specific contact group.
      responses:
        "200":
          description: >
            A json object containing details about the contact group.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactGroup"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Contact Group
      summary: Updates details for a specific contact group.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactGroup"
      responses:
        "200":
          description: >
            A json object containing details about the contact group.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactGroup"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Contact Group
      summary: Removes the specified contact group.  This will have the effect of removing them from all rule sets that are currently using them.
      responses:
        "200":
          description: >
            The contact group was successfully removed.
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /dashboard:
    get:
      parameters:
        - $ref: "#/components/parameters/searchParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/sortParam"
        - $ref: "#/components/parameters/sortDirParam"
      tags:
        - Dashboard
      summary: Fetch a list of dashboards.
      responses:
        "200":
          description: >
            An array containing dashboard objects, potentially narrowed using search and pagination parameters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Dashboard"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Dashboard
      summary: Creates a new dashboard.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Dashboard"
      responses:
        "200":
          description: >
            A json object containing details about the dashboard.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dashboard"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /dashboard/{id}:
    parameters:
      - $ref: "#/components/parameters/objectPathId"
    get:
      tags:
        - Dashboard
      summary: Retrieves details for a specific dashboard.
      responses:
        "200":
          description: >
            A json object containing details about the dashboard.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dashboard"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Dashboard
      summary: >
        Updates details for a specific dashboard.  Be sure to include all fields when updating, even the ones
        that are not being changed, or the omitted fields could be removed or replaced by default values.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Dashboard"
      responses:
        "200":
          description: >
            A json object containing details about the dashboard.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dashboard"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Dashboard
      summary: >
        You cannot completely remove dashboards from the system, but you can hide the dashboard from the
        web interface and from API listings by performing a DELETE request on the dashboard cid.  Doing
        this will also set the dashboard's "active" state to false.
      responses:
        "200":
          description: >
            The dashboard was successfully deactivated.
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /data/{id}:
    parameters:
      - name: id
        in: path
        description: Combination of the numeric check_id, an underscore, and then the metric name.  <check_id>_<metric_name>
        required: true
        example: 1234_cpu
        schema:
          type: string
    get:
      tags:
        - Data
      parameters:
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum:
              - text
              - numeric
              - histogram
          description: The type of data you wish to extract.  Please note that the type of data, changes the structure of the response object you will get back.
        - in: query
          name: start
          required: true
          schema:
            type: integer
          description: The start time, in epoch seconds, of the duration you wish to export data from.
          example: 1579187990
        - in: query
          name: end
          required: true
          schema:
            type: integer
          description: The end time, in epoch seconds, of the duration you wish to export data from.
          example: 1579187990
        - in: query
          name: period
          schema:
            type: integer
            enum:
              - 60
              - 300
              - 1800
              - 10800
              - 86400
          description: For numeric and histogram types only (not text). The resolution of data you want to get back, in seconds.
          example: 1579187990
        - in: query
          name: format
          schema:
            type: string
            enum:
              - legacy
              - tuple
              - object
          description: >
            This parameter is for numeric type data only, otherwise it is ignored.  This determines the return format
            of the data field. `legacy` is the original format where each record
            is [<timestamp>, <object of values>], `tuple` where each record is a JSON array of just
            numeric value fields with no field identifiers, or `object` where each record is a JSON
            object with field identifier.
        - in: query
          name: format_fields
          # TODO - when this is converted to GoAPI, make this default to "timestamp,value"
          # TODO - if this isn't specified for tuple data, we need to throw an error.  I think perl returns data in random order.  whee
          schema:
            type: string
          description: >
            Required for `tuple` or `object` format types.  This is a list of comma-separated fields to return.
            For tuples, this also controls the order they should be returned in the array.  In typical use, often only
            "timestamp,value" are used, but optionally any of the computed values stored under
            the legacy format object may be returned as well. e.g. count, derivative, stddev, etc.
          example: timestamp,value
      summary: The data endpoint provides a simple way to extract data from Circonus. Please note that this is a BETA API endpoint, and is subject to change without notice.
      responses:
        "200":
          description: >
            A json object containing details about the requested data.  There are several different format types
            that can be returned based on other request parameters.  These are first controlled by the `type` parameter.
            Numeric types are further selected by the `format` parameter, with the fields controlled by the `format_fields`
            parameter.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Data"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /graph:
    get:
      parameters:
        - $ref: "#/components/parameters/searchParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/sortParam"
        - $ref: "#/components/parameters/sortDirParam"
      tags:
        - Graph
      summary: Fetch graphs for the account
      responses:
        "200":
          description: >
            An array containing graphs; narrowed using search and pagination parameters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Graph"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Graph
      summary: Creates a new graph.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Graph"
      responses:
        "200":
          description: >
            A json object containing details about the graph.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Graph"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /graph/{id}:
    parameters:
      - $ref: "#/components/parameters/objectPathId"
    get:
      tags:
        - Graph
      summary: Retrieves details for a specific graph.
      responses:
        "200":
          description: >
            A json object containing details about the graph.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Graph"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Graph
      summary: Updates details for a specific graph.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Graph"
      responses:
        "200":
          description: >
            A json object containing details about the graph.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Graph"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Graph
      summary: Removes the specified graph.
      responses:
        "200":
          description: >
            The graph was successfully removed.
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /maintenance:
    get:
      parameters:
        - $ref: "#/components/parameters/searchParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/sortParam"
        - $ref: "#/components/parameters/sortDirParam"
      tags:
        - Maintenance
      summary: >
        Retrieves a list of all maintenance windows that have not yet expired/stopped.  It is not possible to list
        maintenance windows that have already expired.  Details on past windows can still be fetched with the
        `GET /maintenance/{id}` endpoint.
      responses:
        "200":
          description: >
            An array containing maintenance windows associated with the request account, or narrowed using search and pagination parameters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Maintenance"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Maintenance
      summary: >
        Creates a new maintenance window.  Maintenance windows can be created for a number of different
        types that apply to everything under that type.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Maintenance"
      responses:
        "200":
          description: >
            A json object containing details about the maintenance window.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Maintenance"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /maintenance/{id}:
    parameters:
      - $ref: "#/components/parameters/objectPathId"
    get:
      tags:
        - Maintenance
      summary: Retrieves details for a specific maintenance window.
      responses:
        "200":
          description: >
            A json object containing details about the maintenance window.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Maintenance"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Maintenance
      summary: >
        Updates details for a specific maintenance window.  The `type` and `item` of a maintenance
        window cannot be changed.   Once the window has started, the `start` parameter cannot be
        changed.  Once the window as closed, the `stop` parameter cannot be changed.
      # TODO - perl API used to not allow maintenance windows be created in the past.  We allow that in the UI now, so the API should too.  Verify this is the case in GoAPI
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Maintenance"
      responses:
        "200":
          description: >
            A json object containing details about the maintenance window.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Maintenance"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Maintenance
      summary: >
        Removes the specified maintenance window if the window has not yet started.  Once started
        maintenance windows cannot be deleted.  If it hasn't stopped yet you can stop it right away
        by updating it to stop at the current time using the `PUT /maintenance/{id}` endpoint.
      responses:
        "200":
          description: >
            The maintenance window was successfully removed.
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /metric:
    get:
      parameters:
        - $ref: "#/components/parameters/searchParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/sortParam"
        - $ref: "#/components/parameters/sortDirParam"
        - in: query
          name: activity_start_secs
          schema:
            type: integer
            default: one month before now
          description: >
            The start of the range of time in which to search for metric activity in IRONdb. The value
            must be an integer representing the number of seconds since the Unix epoch. The default
            value used, if omitted, is one month before the current time.  For convenience this parameter
            key can also simply be called "start" rather than "activity_start_secs".
          example: 1579188290
        - in: query
          name: activity_end_secs
          schema:
            type: integer
            default: now
          description: >
            The start of the range of time in which to search for metric activity in IRONdb. The value
            must be an integer representing the number of seconds since the Unix epoch. The default
            value used, if omitted, the current time.  For convenience this parameter
            key can also simply be called "end" rather than "activity_end_secs".
          example: 1579188290
        - in: query
          name: active_start
          schema:
            type: integer
            default: eight hours before now
          description: >
            This allows you to change what time period is compared against for determining the boolean `_active`
            value of the metric.  This parameter is not often used.  This controls the start of the range of time
            in which, if metric activity is found in IRONdb, the metric will be considered active.  The value
            must be an integer representing the number of seconds since the Unix epoch. The default value
            used is eight hours before the current time.
          example: 1579188290
        - in: query
          name: active_end
          schema:
            type: integer
            default: now
          description: >
            This allows you to change what time period is compared against for determining the boolean `_active`
            value of the metric.  This parameter is not often used.  This controls the end of the range of time
            in which, if metric activity is found in IRONdb, the metric will be considered active.  The value
            must be an integer representing the number of seconds since the Unix epoch. The default value
            used is the current time.
          example: 1579188290
      tags:
        - Metric
      summary: >
        Search endpoint for information about individual metrics.  The cid for a Metric consists of the Check ID followed by an underscore 
        followed by the metric name.
      responses:
        "200":
          description: >
            An array containing metrics associated with a check, or narrowed using search and pagination parameters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Metric"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /metric/{id}:
    parameters:
      - $ref: "#/components/parameters/objectPathId"
    get:
      tags:
        - Metric
      summary: Retrieves details for a specific metric.
      responses:
        "200":
          description: >
            A json object containing details about the metric.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Metric"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Metric
      summary: >
          All modifications of metric data should be done through the Check Bundle endpoints.  This endpoint no longer has useful functionality 
          but is maintained to avoid breaking any integrations against it.  Previously written PUTs will continue to work, but the changes are
          discarded.
      deprecated: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Metric"
      responses:
        "200":
          description: >
            A json object containing details about the metric.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Metric"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /provision_broker/{cn}:
    parameters:
      - $ref: "#/components/parameters/brokerCNId"
    get:
      tags:
        - Provision Broker
      summary: Retrieves details for a specific broker's provisioning.
      responses:
        "200":
          description: >
            A json object containing details about the broker.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisionBroker"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Provision Broker
      summary: Updates details for a specific broker.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProvisionBroker"
      responses:
        "200":
          description: >
            A json object containing details about the broker.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisionBroker"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rule_set:
    get:
      parameters:
        - $ref: "#/components/parameters/searchParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/sortParam"
        - $ref: "#/components/parameters/sortDirParam"
      tags:
        - Rule Set
      summary: Retrieves rule set for the current account.
      responses:
        "200":
          description: >
            An array containing rule sets associated with the request account, or narrowed using search and pagination parameters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RuleSet"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Rule Set
      summary: Creates a new rule set.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RuleSet"
      responses:
        "200":
          description: >
            A json object containing details about the rule set.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleSet"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rule_set/{id}:
    parameters:
      - $ref: "#/components/parameters/objectPathId"
    get:
      tags:
        - Rule Set
      summary: Retrieves details for a specific rule set.
      responses:
        "200":
          description: >
            A json object containing details about the rule set.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleSet"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Rule Set
      summary: >
        Updates details for a specific rule set.  Many of the values for a rule set cannot be changed
        once it has been created. The "metric_name", "metric_type" and "check" all form the core identity
        of the rule, and so cannot be modified.  The alert contact for the various severities, or rules can
        be at any point.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RuleSet"
      responses:
        "200":
          description: >
            A json object containing details about the rule set.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleSet"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Rule Set
      summary: Removes the specified rule set.
      responses:
        "200":
          description: >
            The annotation was successfully removed.
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rule_set_group:
    get:
      parameters:
        - $ref: "#/components/parameters/searchParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/sortParam"
        - $ref: "#/components/parameters/sortDirParam"
      tags:
        - Rule Set Group
      summary: Retrieves rule set groups for the current account.
      responses:
        "200":
          description: >
            An array containing rule set groups associated with the request account, or narrowed using search and pagination parameters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RuleSetGroup"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Rule Set Group
      summary: Creates a new rule set group.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RuleSetGroup"
      responses:
        "200":
          description: >
            A json object containing details about the rule set group.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleSetGroup"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /rule_set_group/{id}:
    parameters:
      - $ref: "#/components/parameters/objectPathId"
    get:
      tags:
        - Rule Set Group
      summary: Retrieves details for a specific rule set group.
      responses:
        "200":
          description: >
            A json object containing details about the rule set group.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleSetGroup"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Rule Set Group
      summary: Updates details for a specific rule set group.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RuleSetGroup"
      responses:
        "200":
          description: >
            A json object containing details about the rule set group.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuleSetGroup"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Rule Set Group
      summary: Removes the specified rule set group.
      responses:
        "200":
          description: >
            The rule set group was successfully removed.
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /snapshot:
    get:
      parameters:
        - in: query
          name: type
          schema:
            $ref: "#/components/schemas/SnapshotTypesEnum"
        - in: query
          name: uuid
          schema:
            type: string
            format: uuid
          description: The uuid of the requested shared resource.
        - in: query
          name: key
          schema:
            type: string
          description: The access key of the shared resource.
      tags:
        - Snapshot
      summary: To fetch a PNG image of a shared resource.
      responses:
        "200":
          description: >
            An object containing the image.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Snapshot"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tag:
    get:
      parameters:
        - $ref: "#/components/parameters/searchParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/sortParam"
        - $ref: "#/components/parameters/sortDirParam"
      tags:
        - Tag
      summary: Retrieves tags for the current account.
      responses:
        "200":
          description: >
            An array containing tags associated with the request account, or narrowed using search and pagination parameters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tag/{id}:
    parameters:
      - $ref: "#/components/parameters/objectPathId"
    delete:
      tags:
        - Tag
      summary: Removes the specified tag.  Deleting will remove the tag from all objects in your account.
      responses:
        "200":
          description: >
            The tag was successfully removed.
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user:
    get:
      tags:
        - User
      summary: Retrieves user objects for the account this API token is associated with.  Users can only be viewed if the API token being used has the permissions to do so.
      responses:
        "200":
          description: >
            Success.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/current:
    get:
      tags:
        - User
      summary: Retrieves current user object for the account this API token is associated with.  This is a convenience function that is otherwise identical to `/user/{id}`.
      responses:
        "200":
          description: >
            Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - User
      summary: Updates details for the current user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: >
            A json object containing details about the user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/{id}:
    parameters:
      - $ref: "#/components/parameters/objectPathId"
    get:
      tags:
        - User
      summary: Retrieves details for a specific user.
      responses:
        "200":
          description: >
            A json object containing details about the user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - User
      summary: Updates details for a specific user.  Users can only be modified if the API token being used has the permissions to do so.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: >
            A json object containing details about the user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /worksheet:
    get:
      parameters:
        - $ref: "#/components/parameters/searchParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/sortParam"
        - $ref: "#/components/parameters/sortDirParam"
      tags:
        - Worksheet
      summary: Retrieves annotations for the current worksheet.
      responses:
        "200":
          description: >
            An array containing worksheets associated with the request account, or narrowed using search and pagination parameters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Worksheet"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Worksheet
      summary: Creates a new worksheet.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Worksheet"
      responses:
        "200":
          description: >
            A json object containing details about the worksheet.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Worksheet"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /worksheet/{id}:
    parameters:
      - $ref: "#/components/parameters/objectPathId"
    get:
      tags:
        - Worksheet
      summary: Retrieves details for a specific worksheet.
      responses:
        "200":
          description: >
            A json object containing details about the worksheet.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Worksheet"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Worksheet
      summary: Updates details for a specific worksheet.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Worksheet"
      responses:
        "200":
          description: >
            A json object containing details about the worksheet.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Worksheet"
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Worksheet
      summary: Removes the specified worksheet.
      responses:
        "200":
          description: >
            The worksheet was successfully removed.
        default:
          description: Some sort of error occurred during the request.  The response will include information about the cause of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  parameters:
    brokerCNId:
      name: cn
      in: path
      description: Common name of the broker
      required: true
      example: a1234-n123456.noit.circonus.net
      schema:
        type: string
    objectPathId:
      name: id
      in: path
      description: id of the object
      required: true
      example: 4242
      schema:
        type: integer
        minimum: 1
    searchParam:
      name: search
      in: query
      schema:
        type: string
      # TODO - link this to the current version of the docs
      description: >
        When listing resources via the API, you can narrow the results by including search terms with your GET call.  Colon separated
        tuples of search keys, and search values, are wrapped in parenthesis.  These tuples can be provided as search filters for the
        result set.  These searchable keys change depending on the object type being searched for.   Multiple tuples can be provided
        that will be 'AND'd together.   Documentation on how to use this search is available at https://login.circonus.com/resources/docs/user/SearchingV2.html#SearchVersion2
      example: (check_bundle_id:123456)(host:prod.*.com)
    metricSearchParam:
      name: search
      in: query
      schema:
        type: string
      # TODO - link this to the current version of the docs
      description: >
        Metrics have a very advanced search syntax that can be used to filter the by their Stream Tags.  Documentation on how to use
        this search is available at https://login.circonus.com/resources/docs/user/SearchingV3.html#searching-metric-stream-tags
      example: and(__name:available,__check_target:10.9.8.7,env:prod)
    limitParam:
      name: size
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 1000
        default: 20
      description: >
        Specify the maximum number of items that should be returned in a single call to the API.  If there are more results than can
        be returned inside the limit, an additional `X-Circonus-More-Items: true` HTTP header will be returned.
    offsetParam:
      name: from
      in: query
      schema:
        type: integer
        minimum: 0
        maximum: 1000
        default: 0
      description: >
        The number of items that should be skipped in a resultset, before applying any batch size limit.  Commonly called an 'offset'.
    sortParam:
      name: order
      in: query
      schema:
        type: string
      description: >
        To assure proper paging or consistent ordering, results should be sorted by one of the object fields.
      example: name
    sortDirParam:
      name: dir
      in: query
      schema:
        type: string
        enum:
          - asc
          - desc
        default: asc
      description: >
        Specify the direction of result sorting.
  securitySchemes:
    App-Name:
      in: header
      name: X-Circonus-App-Name
      type: apiKey
      description: The name of the registered application using the API.
    Auth-Token:
      in: header
      name: X-Circonus-Auth-Token
      type: apiKey
      description: A valid API authentication token.
  schemas:
    # Enums
    EncryptionAlgorithmsEnum:
      type: string
      enum:
        - chacha20-poly1305@openssh.com
        - aes256-gcm@openssh.com
        - aes128-gcm@openssh.com
        - aes256-ctr
        - aes192-ctr
        - aes128-ctr
        - aes256-cbc
        - aes192-cbc
        - aes128-cbc
        - rijndael128-cbc
        - rijndael192-cbc
        - rijndael256-cbc
        - blowfish-cbc
        - blowfish-ecb
        - blowfish-cfb
        - blowfish-ofb
        - blowfish-ctr
        - twofish128-ctr
        - twofish128-cbc
        - twofish192-ctr
        - twofish192-cbc
        - twofish256-ctr
        - twofish256-cbc
        - twofish-cbc
        - twofish-ecb
        - twofish-cfb
        - twofish-ofb
        - arcfour256
        - arcfour128
        - arcfour
        - cast128-cbc
        - cast128-ecb
        - cast128-cfb
        - cast128-ofb
        - idea-cbc
        - idea-ecb
        - idea-cfb
        - idea-ofb
        - 3des-cbc
        - 3des-ecb
        - 3des-cfb
        - 3des-ofb
        - 3des-ctr
        - none
    MessageAuthAlgosEnum:
      type: string
      enum:
        - hmac-sha2-512-etm@openssh.com
        - hmac-sha2-256-etm@openssh.com
        - umac-128-etm@openssh.com
        - umac-64-etm@openssh.com
        - hmac-sha2-512
        - hmac-sha2-256
        - hmac-sha1
        - hmac-sha1-96
        - hmac-md5
        - hmac-md5-96
        - hmac-ripemd160
        - hmac-ripemd160@openssh.com
        - none
    CheckTypesEnum:
      type: string
      enum:
        - caql
        - cim
        - circonuswindowsagent
        - circonuswindowsagent:nad
        - cloudwatch
        - collectd
        - composite
        - consul
        - dcm
        - dhcp
        - dns
        - elasticsearch
        - external
        - ganglia
        - graphite_tls
        - graphite_plain
        - googleanalytics
        - haproxy
        - http
        - http:apache
        - httptrap
        - httptrap:cloud_agent_aws
        - httptrap:cloud_agent_azure
        - httptrap:cloud_agent_gcp
        - imap
        - jmx
        - json
        - json:couchdb
        - json:mongodb
        - json:nad
        - json:riak
        - ldap
        - memcached
        - mongodb
        - munin
        - mysql
        - newrelic_rpm
        - nginx
        - nrpe
        - ntp
        - opentsdb
        - oracle
        - ping_icmp
        - promtext
        - prometheus
        - prometheus:kubernetes
        - pop3
        - postgres
        - redis
        - resmon
        - smtp
        - snmp
        - snmp:momentum
        - sqlserver
        - ssh2
        - statsd
        - tcp
        - varnish
      description: >
        The different check types available.  This may include older deprecated types, or enterprise-only types that are not available to all brokers.
      example: http
    FunctionsEnum:
      type: string
      enum:
        - average
        - stddev
        - derive
        - derive_stddev
        - counter
        - counter_stddev
      example: average
    SnapshotTypesEnum:
      type: string
      enum:
        - dashboards
        - graphs
        - worksheets
      description: The type of shared resource.
      example: graphs
    # sub-objects
    AlertFormat:
      type: object
      properties:
        long_message:
          type: string
          description: The bulk of the message used in long form alert messages.
        long_subject:
          type: string
          description: The subject used in long form alert messages.
        long_summary:
          type: string
          description: The brief summary used in long form alert messages.
        short_message:
          type: string
          description: The subject used in short form alert messages
        short_summary:
          type: string
          description: The brief summary used in short form alert messages

    CheckTypeCAQLConfig:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: A well formed CAQL query that will be the basis of the Check
    CheckTypeCirconusWindowsAgentConfig:
      type: object
      required:
        - query
      properties:
        auth_password:
          type: string
          description: The HTTP BASIC Authentication user password.
        auth_user:
          type: string
          description: The HTTP BASIC Authentication user name.
        calculated:
          type: string
          enum:
            - true
            - false
            - on
            - off
          default: "true"
        category:
          type: string
          description: The category to pull WMI counters from.
        port:
          type: integer
          default: 34332
          description: The TCP port can be specified to overide the default.
        url:
          type: string
          description: The URL including schema and hostname (as you would type into a browser's location bar).
    CheckTypeCloudwatchConfig:
      type: object
      properties:
        api_key:
          type: string
          description: The AWS API Key to use for connections
        api_secret:
          type: string
          description: The AWS API Secret
        cloudwatch_metrics:
          type: string
          description: A comma-delimited list of metrics to pull data for
        dim_(.+):
          type: string
          description: The dimensions to query for each metric. dim_foo will set a metric with dimension "foo".
        granularity:
          type: string
          enum:
            - 1
            - 5
            - 60
          default: 5
          description: The granularity of cloudwatch data to pull.
        namespace:
          type: string
          description: The namespace to pull parameters from
        statistics:
          type: string
          default: "Average"
          description: "A comma-delimited list of statistics to pull per metric (Choices are: Average, Sum, SampleCount, Maximum, and Minimum - 'Default' may also be specified to pull recommended values)"
          example: Average,Minimum,Maximum
        url:
          type: string
          default: https://monitoring.amazonaws.com
          description: The URL including schema and hostname for the Cloudwatch monitoring server. This value will be used to specify the region - for example, to pull from us-east-1, the URL would be https://monitoring.us-east-1.amazonaws.com.
        version:
          type: string
          default: "2010-08-01"
          description: The version of the Cloudwatch API to use.
    CheckTypeCollectdConfig:
      type: object
      properties:
        asynch_metrics:
          type: string
          enum:
            - true
            - false
          description: Determines if metrics should be reported on arrival or queued into periodic bundles.
        secret:
          type: string
          description: >
            The collectd password for authenticating signed and encrypted packets. Also
            the password used for HTTP authentication when using the write_http ingestion method.
        security_level:
          type: integer
          minimum: 0
          maximum: 2
          description: An integer detailing the security level which to allow. 0 for all packets allowed, 1 for signed and encrypted packets allowed, 2 for only encrypted packets allowed.
        username:
          type: string
          description: The collectd username for authenticating signed and encrypted packets. Also the username used for HTTP authentication when using the write_http ingestion method.
    CheckTypeCompositeConfig:
      type: object
      properties:
        composite_metric_name:
          type: string
          description: The name of the metric that will be output from this check.
        formula:
          type: string
          description: The equation to determine the value of the metric.
    CheckTypeConsulConfig:
      type: object
      properties:
        check_name:
          type: string
          description: The name of the Consul check.
        check_name_blacklist:
          type: string
          description: A comma separated list of check names to skip.
        consul_dc:
          type: string
          description: The UserSpecifiedConsulDC to filter to.
        node_blacklist:
          type: string
          description: A comma separated list of node names to skip.
        port:
          type: integer
          default: 8500
          minimum: 1
          maximum: 65535
          description: The TCP port can be specified to override the default of 8500.
        service_blacklist:
          type: string
          description: A comma separated list of service names to skip.
        service_name:
          type: string
          description: The Consul service name to check.
        url:
          type: string
          default: http:///v1/health/state/any
          description: "The Consul health check url to call, see consul docs: https://www.consul.io/docs/agent/http/health.html"
    CheckTypeDHCPConfig:
      type: object
      properties:
        hardware_addr:
          type: string
          default: 00:00:00:00:00:00
          description: The hardware address of the host computer.
        host_ip:
          type: string
          format: ipv4
          default: 0.0.0.0
          description: The IP address of the host computer.
        request_type:
          type: string
          enum:
            - 1
            - 8
          default: 1
          description: The type of DHCP request message to send to the server.
        send_port:
          type: integer
          default: 67
          description: Specifies the port to send DHCP request packets to.
    CheckTypeDNSConfig:
      type: object
      properties:
        ctype:
          type: string
          enum:
            - IN
            - CH
            - HS
          default: IN
          description: >
            The DNS class of the query. IN: Internet, CH: Chaos, HS: Hesoid.
        nameserver:
          type: string
          description: The domain name server to query. If the name of the check is in-addr.arpa, the system default nameserver is used. Otherwise, the nameserver is the %[target] of the the check.
        query:
          type: string
          description: The query to send. If the name of the check is in-addr.arpa, the reverse IP octet notation of in-addr.arpa syntax is synthesized by default. Otherwise the default query is the name of the check itself.
        rtype:
          type: string
          enum:
            - A
            - AAAA
            - TXT
            - MX
            - SOA
            - CNAME
            - PTR
            - NS
            - MB
            - MD
            - MF
            - MG
            - MR
          default: A
          description: The DNS resource record type of the query. If the name of the check is in-addr.arpa, the default is PTR, otherwise it is A.
    CheckTypeElasticSearchConfig:
      type: object
      properties:
        port:
          type: string
          default: "81"
          description: >
            The TCP port can be specified to override the default of 81.
        url:
          type: string
          description: The URL including schema and hostname (as you would type into a browser's location bar).
    CheckTypeGangliaConfig:
      type: object
      properties:
        asynch_metrics:
          type: string
          enum:
            - true
            - false
          description: Determines if metrics should be reported on arrival or queued into periodic bundles.
    CheckTypeHaproxyConfig:
      type: object
      properties:
        auth_password:
          type: string
          description: The HTTP BASIC Authentication user password.
        auth_user:
          type: string
          description: The HTTP BASIC Authentication user name.
        host:
          type: string
          description: Host name to include in HTTP request, defaults to target IP.
        port:
          type: string
          default: 80
          description: The TCP port can be specified to override the default.
        select:
          type: string
          description: Specifies a regular expression to pick which metrics to report. Will be matched against the pxname and svname columns concatenated by a ","
        uri:
          type: string
          example: /admin?stats;csv
          description: The URL excluding schema and hostname for the haproxy stats CSV export.
        use_ssl:
          type: string
          enum:
            - true
            - false
            - on
            - off
          default: false
          description: Upgrade TCP connection to use SSL.
    CheckTypeHTTPConfig:
      type: object
      properties:
        auth_method:
          type: string
          enum:
            - Basic
            - Digest
            - Auto
        auth_password:
          type: string
          description: The password to use during authentication.
        auth_user:
          type: string
          description: The user to authenticate as.
        body:
          type: string
          description: This regular expression is matched against the body of the response. If a match is not found, the check will be marked as "bad."
        ca_chain:
          type: string
          description: A path to a file containing all the certificate authorities that should be loaded to validate the remote certificate (for SSL checks).
        certificate_file:
          type: string
          description: A path to a file containing the client certificate that will be presented to the remote server (for SSL checks).
        ciphers:
          type: string
          description: A list of ciphers to be used in the SSL protocol (for SSL checks).
        code:
          type: string
          format: regex
          default: "^200$"
          description: The HTTP code that is expected. If the code received does not match this regular expression, the check is marked as "bad."
        extract:
          type: string
          description: This regular expression is matched against the body of the response globally. The first capturing match is the key and the second capturing match is the value. Each key/value extracted is registered as a metric for the check.
        header_(\S+):
          type: string
          description: Allows the setting of arbitrary HTTP headers in the request.
        http_version:
          type: string
          pattern: '^(\d+\.\d+)?$'
          default: 1.1
          description: Sets the HTTP version for the check to use.
        key_file:
          type: string
          description: A path to a file containing key to be used in conjunction with the client certificate (for SSL checks).
        method:
          type: string
          default: GET
          description: The HTTP method to use.
        payload:
          type: string
          description: The information transferred as the payload of an HTTP request.
        read_limit:
          type: string
          format: integer
          default: 1048576
          description: Sets an approximate limit on the data read (0 means no limit).
        redirects:
          type: string
          format: integer
          default: 0
          description: The maximum number of Location header redirects to follow.
        url:
          type: string
          description: The URL including schema and hostname (as you would type into a browser's location bar).
    CheckTypeHTTPApacheConfig:
      type: object
      properties:
        auth_method:
          type: string
          enum:
            - Basic
            - Digest
            - Auto
        auth_password:
          type: string
          description: The password to use during authentication.
        auth_user:
          type: string
          description: The user to authenticate as.
        body:
          type: string
          description: This regular expression is matched against the body of the response. If a match is not found, the check will be marked as "bad."
        ca_chain:
          type: string
          description: A path to a file containing all the certificate authorities that should be loaded to validate the remote certificate (for SSL checks).
        certificate_file:
          type: string
          description: A path to a file containing the client certificate that will be presented to the remote server (for SSL checks).
        ciphers:
          type: string
          description: A list of ciphers to be used in the SSL protocol (for SSL checks).
        code:
          type: string
          format: regex
          default: "^200$"
          description: The HTTP code that is expected. If the code received does not match this regular expression, the check is marked as "bad."
        extract:
          type: string
          description: This regular expression is matched against the body of the response globally. The first capturing match is the key and the second capturing match is the value. Each key/value extracted is registered as a metric for the check.
        header_(\S+):
          type: string
          description: Allows the setting of arbitrary HTTP headers in the request.
        http_version:
          type: string
          pattern: '^(\d+\.\d+)?$'
          default: 1.1
          description: Sets the HTTP version for the check to use.
        key_file:
          type: string
          description: A path to a file containing key to be used in conjunction with the client certificate (for SSL checks).
        method:
          type: string
          default: GET
          description: The HTTP method to use.
        payload:
          type: string
          description: The information transferred as the payload of an HTTP request.
        read_limit:
          type: string
          format: integer
          default: 1048576
          description: Sets an approximate limit on the data read (0 means no limit).
        redirects:
          type: string
          format: integer
          default: 0
          description: The maximum number of Location header redirects to follow.
        url:
          type: string
          description: The URL including schema and hostname (as you would type into a browser's location bar).
    CheckTypeHTTPTrapConfig:
      type: object
      properties:
        asynch_metrics:
          type: string
          enum:
            - true
            - false
          default: false
          description: Specify whether httptrap metrics are logged immediately or held until the status message is to be emitted.
        secret:
          type: string
          pattern: "^[a-zA-Z0-9_-]+$"
          description: >
            Specify the secret with which metrics may be submitted. You may use letters, numbers, dashes, or underscores.
    CheckTypeIMAPConfig:
      type: object
      properties:
        auth_password:
          type: string
          description: The IMAP password.
        auth_user:
          type: string
          description: The IMAP user.
        ca_chain:
          type: string
          description: A path to a file containing all the certificate authorities that should be loaded to validate the remote certificate (for SSL checks).
        certificate_file:
          type: string
          description: A path to a file containing the client certificate that will be presented to the remote server (for SSL checks).
        ciphers:
          type: string
          description: A list of ciphers to be used in the SSL protocol (for SSL checks).
        fetch:
          type: string
          enum:
            - true
            - false
            - on
            - off
          default: false
          description: Fetch either that highest UID or last SEARCH result.
        folder:
          type: string
          default: INBOX
          description: The folder that should be examined.
        header_Host:
          type: string
          description: The host header to validate against the SSL certificate (for SSL checks).
        key_file:
          type: string
          description: A path to a file containing key to be used in conjunction with the client certificate (for SSL checks).
        port:
          type: string
          format: integer
          description: Specifies the port on which the management interface can be reached.
        search:
          type: string
          description: Specify an optional IMAP SEARCH operation to execute after EXAMINE.
        use_ssl:
          type: string
          enum:
            - true
            - false
            - on
            - off
          default: false
          description: Upgrade TCP connection to use SSL.
    CheckTypeJMXConfig:
      type: object
      properties:
        mbean_domains:
          type: string
          description: Space separated list of domains to extract metrics for. Default is all domains (no list specified).
        mbean_properties_(.+):
          type: string
          description: List of properties in the form type=Foo,name=Bar that will filter out JMX objects that don't match at least one of these settings.
        password:
          type: string
          description: Password needed to authenticate with.
        port:
          type: string
          format: integer
          description: The TCP port JMX is running on
        uri:
          type: string
          default: "/jmxrmi"
          description: The JMX URI endpoint to use.
        username:
          type: string
          description: Username needed to authenticate with.
    CheckTypeJSONConfig:
      type: object
      properties:
        auth_method:
          type: string
          enum:
            - Basic
            - Digest
            - Auto
        auth_password:
          type: string
          description: The HTTP Authentication user password.
        auth_user:
          type: string
          description: The HTTP Authentication user name.
        ca_chain:
          type: string
          description: A path to a file containing all the certificate authorities that should be loaded to validate the remote certificate (for SSL checks).
        certificate_file:
          type: string
          description: A path to a file containing the client certificate that will be presented to the remote server (for SSL checks).
        ciphers:
          type: string
          description: A list of ciphers to be used in the SSL protocol (for SSL checks).
        header_(\S+):
          type: string
          description: Allows the setting of arbitrary HTTP headers in the request.
        http_version:
          type: string
          pattern: '^(\d+\.\d+)?$'
          default: 1.1
          description: Sets the HTTP version for the check to use.
        key_file:
          type: string
          description: A path to a file containing key to be used in conjunction with the client certificate (for SSL checks).
        method:
          type: string
          default: GET
          description: The HTTP method to use.
        payload:
          type: string
          description: The optional HTTP payload to send with the request.
        port:
          type: string
          format: integer
          default: 81
          description: The TCP port can be specified to override the default of 81.
        read_limit:
          type: string
          format: integer
          default: 0
          description: Sets an approximate limit on the data read (0 means no limit).
        url:
          type: string
          description: The URL including schema and hostname (as you would type into a browser's location bar).
    CheckTypeJSONCouchDBConfig:
      type: object
      properties:
        auth_method:
          type: string
          enum:
            - Basic
            - Digest
            - Auto
        auth_password:
          type: string
          description: The HTTP Authentication user password.
        auth_user:
          type: string
          description: The HTTP Authentication user name.
        ca_chain:
          type: string
          description: A path to a file containing all the certificate authorities that should be loaded to validate the remote certificate (for SSL checks).
        certificate_file:
          type: string
          description: A path to a file containing the client certificate that will be presented to the remote server (for SSL checks).
        ciphers:
          type: string
          description: A list of ciphers to be used in the SSL protocol (for SSL checks).
        header_(\S+):
          type: string
          description: Allows the setting of arbitrary HTTP headers in the request.
        http_version:
          type: string
          pattern: '^(\d+\.\d+)?$'
          default: 1.1
          description: Sets the HTTP version for the check to use.
        key_file:
          type: string
          description: A path to a file containing key to be used in conjunction with the client certificate (for SSL checks).
        method:
          type: string
          default: GET
          description: The HTTP method to use.
        payload:
          type: string
          description: The optional HTTP payload to send with the request.
        port:
          type: string
          format: integer
          default: 81
          description: The TCP port can be specified to override the default of 81.
        read_limit:
          type: string
          format: integer
          default: 0
          description: Sets an approximate limit on the data read (0 means no limit).
        url:
          type: string
          description: The URL including schema and hostname (as you would type into a browser's location bar).
    CheckTypeJSONMongoDBConfig:
      type: object
      properties:
        auth_method:
          type: string
          enum:
            - Basic
            - Digest
            - Auto
        auth_password:
          type: string
          description: The HTTP Authentication user password.
        auth_user:
          type: string
          description: The HTTP Authentication user name.
        ca_chain:
          type: string
          description: A path to a file containing all the certificate authorities that should be loaded to validate the remote certificate (for SSL checks).
        certificate_file:
          type: string
          description: A path to a file containing the client certificate that will be presented to the remote server (for SSL checks).
        ciphers:
          type: string
          description: A list of ciphers to be used in the SSL protocol (for SSL checks).
        header_(\S+):
          type: string
          description: Allows the setting of arbitrary HTTP headers in the request.
        http_version:
          type: string
          pattern: '^(\d+\.\d+)?$'
          default: 1.1
          description: Sets the HTTP version for the check to use.
        key_file:
          type: string
          description: A path to a file containing key to be used in conjunction with the client certificate (for SSL checks).
        method:
          type: string
          default: GET
          description: The HTTP method to use.
        payload:
          type: string
          description: The optional HTTP payload to send with the request.
        port:
          type: string
          format: integer
          default: 81
          description: The TCP port can be specified to override the default of 81.
        read_limit:
          type: string
          format: integer
          default: 0
          description: Sets an approximate limit on the data read (0 means no limit).
        url:
          type: string
          description: The URL including schema and hostname (as you would type into a browser's location bar).
    CheckTypeJSONNadConfig:
      type: object
      properties:
        auth_method:
          type: string
          enum:
            - Basic
            - Digest
            - Auto
        auth_password:
          type: string
          description: The HTTP Authentication user password.
        auth_user:
          type: string
          description: The HTTP Authentication user name.
        ca_chain:
          type: string
          description: A path to a file containing all the certificate authorities that should be loaded to validate the remote certificate (for SSL checks).
        certificate_file:
          type: string
          description: A path to a file containing the client certificate that will be presented to the remote server (for SSL checks).
        ciphers:
          type: string
          description: A list of ciphers to be used in the SSL protocol (for SSL checks).
        header_(\S+):
          type: string
          description: Allows the setting of arbitrary HTTP headers in the request.
        http_version:
          type: string
          pattern: '^(\d+\.\d+)?$'
          default: 1.1
          description: Sets the HTTP version for the check to use.
        key_file:
          type: string
          description: A path to a file containing key to be used in conjunction with the client certificate (for SSL checks).
        method:
          type: string
          default: GET
          description: The HTTP method to use.
        payload:
          type: string
          description: The optional HTTP payload to send with the request.
        port:
          type: string
          format: integer
          default: 81
          description: The TCP port can be specified to override the default of 81.
        read_limit:
          type: string
          format: integer
          default: 0
          description: Sets an approximate limit on the data read (0 means no limit).
        url:
          type: string
          description: The URL including schema and hostname (as you would type into a browser's location bar).
    CheckTypeJSONRiakConfig:
      type: object
      properties:
        auth_method:
          type: string
          enum:
            - Basic
            - Digest
            - Auto
        auth_password:
          type: string
          description: The HTTP Authentication user password.
        auth_user:
          type: string
          description: The HTTP Authentication user name.
        ca_chain:
          type: string
          description: A path to a file containing all the certificate authorities that should be loaded to validate the remote certificate (for SSL checks).
        certificate_file:
          type: string
          description: A path to a file containing the client certificate that will be presented to the remote server (for SSL checks).
        ciphers:
          type: string
          description: A list of ciphers to be used in the SSL protocol (for SSL checks).
        header_(\S+):
          type: string
          description: Allows the setting of arbitrary HTTP headers in the request.
        http_version:
          type: string
          pattern: '^(\d+\.\d+)?$'
          default: 1.1
          description: Sets the HTTP version for the check to use.
        key_file:
          type: string
          description: A path to a file containing key to be used in conjunction with the client certificate (for SSL checks).
        method:
          type: string
          default: GET
          description: The HTTP method to use.
        payload:
          type: string
          description: The optional HTTP payload to send with the request.
        port:
          type: string
          format: integer
          default: 81
          description: The TCP port can be specified to override the default of 81.
        read_limit:
          type: string
          format: integer
          default: 0
          description: Sets an approximate limit on the data read (0 means no limit).
        url:
          type: string
          description: The URL including schema and hostname (as you would type into a browser's location bar).
    CheckTypeLDAPConfig:
      type: object
      properties:
        authtype:
          type: string
          description: The authorization type to use.
        dn:
          type: string
          description: The distinguished name to use to connect.
        password:
          type: string
          description: Password needed to authenticate with.
        port:
          type: string
          format: integer
          default: "389"
          description: The TCP port the LDAP server is running on.
        security_principal:
          type: string
          description: The security principal used to connect with.
    CheckTypeMemcachedConfig:
      type: object
      properties:
        port:
          type: string
          format: integer
          description: Specifies the port on which the memcache interface can be reached.
    CheckTypeMongoDBConfig:
      type: object
      properties:
        command:
          type: string
          description: The command that will be executed.
        dbname:
          type: string
          description: The name of the database to connect to.
        password:
          type: string
          description: Password needed to authenticate with.
        port:
          type: string
          format: integer
          description: The TCP port MongoDB is listening on.
        username:
          type: string
          description: Username needed to authenticate with.
    CheckTypeMuninConfig:
      type: object
      # This object is empty
    CheckTypeMySQLConfig:
      type: object
      properties:
        dsn:
          type: string
          description: The connect string for MySQL. The syntax of this string is explained in the MySQL documentation. See Database Connection Control Functions. The MySQL-specific behavior is explained in the mysql_real_connect documentation.
        sql:
          type: string
          description: The query that will be executed.
    CheckTypeNewRelicRPMConfig:
      type: object
      properties:
        acct_id:
          type: string
          description: The account ID passed to NewRelic RPM's data-api.
        api_key:
          type: string
          description: The API key passed to NewRelic's REST API.
        application_id:
          type: string
          description: The application ID passed to NewRelic RPM's data-api.
        license_key:
          type: string
          description: The license key passed to NewRelic RPM's data-api.
    CheckTypeNginxConfig:
      type: object
      properties:
        ca_chain:
          type: string
          description: A path to a file containing all the certificate authorities that should be loaded to validate the remote certificate (for SSL checks).
        certificate_file:
          type: string
          description: A path to a file containing the client certificate that will be presented to the remote server (for SSL checks).
        ciphers:
          type: string
          description: A list of ciphers to be used in the SSL protocol (for SSL checks).
        key_file:
          type: string
          description: A path to a file containing key to be used in conjunction with the cilent certificate (for SSL checks).
        url:
          type: string
          description: The URL including schema and hostname for the status output from nginx.
    CheckTypeNRPEConfig:
      type: object
      properties:
        append_uom:
          type: string
          enum:
            - true
            - false
            - on
            - off
          description: If the value comes back with a unit of measure, append it to the metric name.
        command:
          type: string
          description: Command to run on the remote node.
        port:
          type: string
          format: integer
          description: Specifies the port on which the management interface can be reached.
        use_ssl:
          type: string
          enum:
            - true
            - false
            - on
            - off
          default: true
          description: Upgrade TCP connection to use SSL.
    CheckTypeNTPConfig:
      type: object
      properties:
        control:
          type: string
          enum:
            - true
            - false
            - on
            - off
          default: false
          description: Use the NTP control protocol to learn about the other end. If this is not true/on, then this check will determine the NTP telemetry of the target relative to the agent's local time. If it is true/on, then the agent will request the NTP telemetry of the target regarding it's preferred peer.
        port:
          type: string
          format: integer
          default: 123
          description: Specifies the port on which the management interface can be reached.
    CheckTypeOpenTSDBConfig:
      type: object
      properties:
        listen_port:
          type: string
          format: integer
          default: 4242
          description: Specify the port which this check listens on. The data provider should be configured to send plain text metrics to this port.
        rows_per_cycle:
          type: string
          format: integer
          default: 100
          description: The max number of rows to process in one event loop. Defaults to 100. Turn this up higher if you have very high volume metric collection.
    CheckTypeOracleConfig:
      type: object
      properties:
        append_column_name:
          type: string
          enum:
            - true
            - false
          description: Always append column names to metric names.
        database:
          type: string
          description: Database name to connect to.
        jdbc_(\S+):
          type: string
          description: Allows the setting of arbitrary JDBC connection parameters.
        password:
          type: string
          description: Password to connect with.
        port:
          type: string
          format: integer
          default: 1521
          description: Post to connect on.
        sql:
          type: string
          description: The query that will be executed.
        user:
          type: string
          description: Username to connect with.
    CheckTypePingICMPConfig:
      type: object
      properties:
        avail_needed:
          type: string
          format: integer
          default: 100
          description: >
            The percentage of ICMP available required for the check to be considered "good." By default, 100% of the ICMP requests must have responses for a good state.
        count:
          type: string
          format: integer
          default: 5
          description: The number of ICMP requests to send during a single check.
        interval:
          type: string
          format: integer
          default: 2000
          description: The number of milliseconds between ICMP requests.
    CheckTypePostgresConfig:
      type: object
      properties:
        dsn:
          type: string
          description: The connect string for PostgreSQL. The syntax of this string is documented in your PostgreSQL documentation. See Database Connection Control Functions..
        sql:
          type: string
          description: The query that will be executed.
    CheckTypePrometheusConfig:
      type: object
      properties:
        secret:
          type: string
          pattern: "^[a-zA-Z0-9_-]+$"
          description: Specify the secret with which metrics may be submitted. You may use letters, numbers, dashes, or underscores.
    CheckTypePromtextConfig:
      type: object
      properties:
        port:
          type: string
          format: integer
          default: 80
          description: The TCP port can be specified to override the default of 80.
        url:
          type: string
          description: The URL including schema and hostname (as you would type into a browser's location bar).
    CheckTypeRedisConfig:
      type: object
      properties:
        command:
          type: string
          default: INFO
          description: Command to send to redis server.
        dbindex:
          type: string
          format: integer
          default: 0
          description: Index of the database the command will run against
        password:
          type: string
          description: Auth password for redis.
        port:
          type: string
          format: integer
          default: 6379
          description: Specifies the port on which redis is running.
    CheckTypeResmonConfig:
      type: object
      properties:
        auth_method:
          type: string
          enum:
            - Basic
            - Digest
            - Auto
        auth_password:
          type: string
          description: The password to use during authentication.
        auth_user:
          type: string
          description: The user to authenticate as.
        body:
          type: string
          description: This regular expression is matched against the body of the response. If a match is not found, the check will be marked as "bad."
        ca_chain:
          type: string
          description: A path to a file containing all the certificate authorities that should be loaded to validate the remote certificate (for SSL checks).
        certificate_file:
          type: string
          description: A path to a file containing the client certificate that will be presented to the remote server (for SSL checks).
        ciphers:
          type: string
          description: A list of ciphers to be used in the SSL protocol (for SSL checks).
        header_(\S+):
          type: string
          description: Allows the setting of arbitrary HTTP headers in the request.
        http_version:
          type: string
          pattern: '^(\d+\.\d+)?$'
          default: 1.1
          description: Sets the HTTP version for the check to use.
        key_file:
          type: string
          description: A path to a file containing key to be used in conjunction with the client certificate (for SSL checks).
        method:
          type: string
          default: GET
          description: The HTTP method to use.
        payload:
          type: string
          description: The information transferred as the payload of an HTTP request.
        port:
          type: string
          format: integer
          default: 81
          description: The TCP port can be specified to override the default of 81.
        read_limit:
          type: string
          format: integer
          default: 0
          description: Sets an approximate limit on the data read (0 means no limit).
        url:
          type: string
          description: The URL including schema and hostname (as you would type into a browser's location bar).
    CheckTypeSMTPConfig:
      type: object
      properties:
        ehlo:
          type: string
          default: noit.local
          description: Specifies the EHLO parameter.
        from:
          type: string
          description: Specifies the envelope sender.
        payload:
          type: string
          default: "Subject: Testing"
          description: Specifies the payload sent (on the wire). CR LF DOT CR LF is appended automatically.
        port:
          type: string
          format: integer
          default: 25
          description: Specifies the TCP port to connect to.
        proxy_dest_address:
          type: string
          description: >
            The IP (or string) to use as the destination address portion of the PROXY protocol. More on the proxy protocol here: http://www.haproxy.org/download/1.8/doc/proxy-protocol.txt
        proxy_dest_port:
          type: string
          format: integer
          default: 25
          description: The port to use as the dest port portion of the PROXY protocol. Defaults to the port setting or 25
        proxy_family:
          type: string
          enum:
            - TCP4
            - TCP6
          default: TCP4
          description: The protocol family to send in the PROXY header.
        proxy_protocol:
          type: string
          enum:
            - true
            - false
          default: false
          description: Test MTA responses to a PROXY protocol header by setting this to true.
        proxy_source_address:
          type: string
          description: >
            The IP (or string) to use as the source address portion of the PROXY protocol. More on the proxy protocol here: http://www.haproxy.org/download/1.8/doc/proxy-protocol.txt
        proxy_source_port:
          type: string
          format: integer
          description: The port to use as the source port portion of the PROXY protocol. Defaults to the actual source port of the connection to the target_ip.
        sasl_auth_id:
          type: string
          description: The SASL Authorization Identity.
        sasl_authentication:
          type: string
          enum:
            - off
            - login
            - plain
          default: off
          description: Specifies the type of SASL Authentication to use.
        sasl_password:
          type: string
          description: The SASL Authentication password.
        sasl_user:
          type: string
          description: The SASL Authentication username.
        starttls:
          type: string
          enum:
            - true
            - false
          default: false
          description: Specified if the client should attempt a STARTTLS upgrade.
        to:
          type: string
          description: Specifies the envelope recipient.
    CheckTypeSNMPConfig:
      type: object
      properties:
        auth_passphrase:
          type: string
          description: The authentication passphrase to use. Only applicable to SNMP Version 3.
        auth_protocol:
          type: string
          enum:
            - MD5
            - SHA
          default: MD5
          description: The authentication protocol to use. Only applicable to SNMP Version 3.
        community:
          type: string
          default: public
          description: The SNMP community string providing read access.
        context_engine:
          type: string
          pattern: "^[0-9a-fA-F]+$"
          description: The context engine hex value to use. Only applicable to SNMP Version 3.
        context_name:
          type: string
          description: The context name to use. Only applicable to SNMP Version 3.
        oid_(.+):
          type: string
          description: Defines a metric to query. Key oid_foo will establish a metric called foo. The value of the parameter should be an OID either in decimal notation or MIB name.
        port:
          type: string
          format: integer
          default: 161
          description: The UDP port to which SNMP queries will be sent.
        privacy_passphrase:
          type: string
          description: The privacy passphrase to use. Only applicable to SNMP Version 3.
        privacy_protocol:
          type: string
          enum:
            - DES
            - AES128
            - AES
          default: DES
          description: The privacy protocol to use. Only applicable to SNMP Version 3.
        security_engine:
          type: string
          pattern: "^[0-9a-fA-F]+$"
          description: The security engine hex value to use. Only applicaable to SNMP Version 3.
        security_level:
          type: string
          enum:
            - noAuthNoPriv
            - authNoPriv
            - authPriv
          default: authPriv
          description: >
            The security level to use for the SNMP session. Choices are "authPriv" (authenticated and encrypted), "authNoPriv" (authenticated and unencrypted) and "noAuthNoPriv" (unauthenticated and unencrypted). Only applicable to SNMP Version 3.
        security_name:
          type: string
          description: The security name (or user name) to use. Only applicable to SNMP Version 3.
        separate_queries:
          type: string
          enum:
            - true
            - false
            - on
            - off
          default: false
          description: Whether or not to query each OID separately.
        type_(.+):
          type: string
          description: >
            Defines a coercion for a metric type. The name of the metric must identically match one of the oid_(.+) patterns. The value can be either one of the single letter codes in the metric_type_t enum or the following string variants: guess, int32, uint32, int64, uint64, double, string.
        version:
          type: string
          enum:
            - 1
            - 2c
            - 3
          default: 2c
          description: The SNMP version used for queries.
    CheckTypeSNMPMomentumConfig:
      type: object
      properties:
        auth_passphrase:
          type: string
          description: The authentication passphrase to use. Only applicable to SNMP Version 3.
        auth_protocol:
          type: string
          enum:
            - MD5
            - SHA
          default: MD5
          description: The authentication protocol to use. Only applicable to SNMP Version 3.
        community:
          type: string
          default: public
          description: The SNMP community string providing read access.
        context_engine:
          type: string
          pattern: "^[0-9a-fA-F]+$"
          description: The context engine hex value to use. Only applicable to SNMP Version 3.
        context_name:
          type: string
          description: The context name to use. Only applicable to SNMP Version 3.
        oid_(.+):
          type: string
          description: Defines a metric to query. Key oid_foo will establish a metric called foo. The value of the parameter should be an OID either in decimal notation or MIB name.
        port:
          type: string
          format: integer
          default: 161
          description: The UDP port to which SNMP queries will be sent.
        privacy_passphrase:
          type: string
          description: The privacy passphrase to use. Only applicable to SNMP Version 3.
        privacy_protocol:
          type: string
          enum:
            - DES
            - AES128
            - AES
          default: DES
          description: The privacy protocol to use. Only applicable to SNMP Version 3.
        security_engine:
          type: string
          pattern: "^[0-9a-fA-F]+$"
          description: The security engine hex value to use. Only applicaable to SNMP Version 3.
        security_level:
          type: string
          enum:
            - noAuthNoPriv
            - authNoPriv
            - authPriv
          default: authPriv
          description: >
            The security level to use for the SNMP session. Choices are "authPriv" (authenticated and encrypted), "authNoPriv" (authenticated and unencrypted) and "noAuthNoPriv" (unauthenticated and unencrypted). Only applicable to SNMP Version 3.
        security_name:
          type: string
          description: The security name (or user name) to use. Only applicable to SNMP Version 3.
        separate_queries:
          type: string
          enum:
            - true
            - false
            - on
            - off
          default: false
          description: Whether or not to query each OID separately.
        type_(.+):
          type: string
          description: >
            Defines a coercion for a metric type. The name of the metric must identically match one of the oid_(.+) patterns. The value can be either one of the single letter codes in the metric_type_t enum or the following string variants: guess, int32, uint32, int64, uint64, double, string.
        version:
          type: string
          enum:
            - 1
            - 2c
            - 3
          default: 2c
          description: The SNMP version used for queries.
    CheckTypeSQLServerConfig:
      type: object
      properties:
        append_column_name:
          type: string
          enum:
            - true
            - false
          description: Always append column names to metric names.
        database:
          type: string
          description: Database name to connect to.
        jdbc_(\S+):
          type: string
          description: Allows the setting of arbitrary JDBC connection parameters.
        password:
          type: string
          description: Password to connect with.
        port:
          type: string
          format: integer
          default: 1433
          description: Post to connect on.
        sql:
          type: string
          description: The query that will be executed.
        user:
          type: string
          description: Username to connect with.
    CheckTypeSSH2Config:
      type: object
      properties:
        method_comp_cs:
          type: string
          enum:
            - zlib
            - none
          default: none
          description: The compression algorithm used from client to server.
        method_comp_sc:
          type: string
          enum:
            - zlib
            - none
          default: none
          description: The compression algorithm used from server to client.
        method_crypt_cs:
          allOf:
            - $ref: "#/components/schemas/EncryptionAlgorithmsEnum"
          description: The encryption algorithm used from client to server.
        method_crypt_sc:
          allOf:
            - $ref: "#/components/schemas/EncryptionAlgorithmsEnum"
          description: The encryption algorithm used from server to client.
        method_hostkey:
          enum:
            - ssh-dss
            - ssh-rsa
            - ecdsa-sha2-nistp256
            - ssh-ed25519
          default: ssh-rsa
          description: The host key algorithm supported.
        method_kex:
          enum:
            - diffie-hellman-group1-sha1
            - diffie-hellman-group14-sha1
            - diffie-hellman-group16-sha512
            - diffie-hellman-group18-sha512
          default: diffie-hellman-group14-sha1
        method_lang_cs:
          type: string
          description: The language used from client to server.
        method_mac_cs:
          allOf:
            - $ref: "#/components/schemas/MessageAuthAlgosEnum"
          description: The message authentication code algorithm used from client to server.
        method_mac_sc:
          allOf:
            - $ref: "#/components/schemas/MessageAuthAlgosEnum"
          description: The message authentication code algorithm used from server to client.
        port:
          type: string
          format: integer
          default: 22
          description: The TCP port on which the remote server's ssh service is running.
    CheckTypeStatsdConfig:
      type: object
      # Empty object
    CheckTypeTCPConfig:
      type: object
      properties:
        banner_match:
          type: string
          description: This regular expression is matched against the response banner. If a match is not found, the check will be marked as bad.
        ca_chain:
          type: string
          description: A path to a file containing all the certificate authorities that should be loaded to validate the remote certificate (for SSL checks).
        certificate_file:
          type: string
          description: A path to a file containing the client certificate that will be presented to the remote server (for SSL checks).
        ciphers:
          type: string
          description: A list of ciphers to be used in the SSL protocol (for SSL checks).
        key_file:
          type: string
          description: A path to a file containing key to be used in conjunction with the cilent certificate (for SSL checks).
        port:
          type: string
          format: integer
          description: Specifies the port on which the management interface can be reached.
        use_ssl:
          type: string
          enum:
            - true
            - false
            - on
            - off
          default: false
          description: Upgrade TCP connection to use SSL.
    CheckTypeVarnishConfig:
      type: object
      # Empty object

    CustomDashboardFilter:
      type: object
      required:
        - order
        - long_label
        - short_label
        - tabs
      description: >
        Must have either a metric_key, or a values array defined.  
      properties:
        order:
          type: integer
          description: >
            Used to set the rendering order of filter dropdowns if multiple are shown on the same tab.
          example: 1
        long_label:
          type: string
          description: >
            The full filter label.  This is displayed in the dropdown menu.
          example: Namespaces
        short_label:
          type: string
          description: >
            A shorter filter label if the long label isn't very short.  This used in the breadcrumbs.
          example: NS
        tabs:
          type: array
          items:
            type: string
          description: The keys of tabs where this filter should be used.
          example: [ "overview", "nodes"]
        metric_key:
          type: string
          format: uuid
          description: >
            The unique metric_key for the metrics group containing the metrics being used to generate this filter if generating the filter values from metric tags.  If used, you must also have a tag_regexp defined.
          example: f1513f29-5b56-4623-bedb-a125bbc1caaa
        metric_criteria:
          type: string
          enum:
            - "=1"
          description: >
            If generating this filter from metric tags, this can be set to "=1" to indicate that metrics should only be included in the filter values if their value is 1.  This should otherwise be null or elided.
          example: "=1"
        tag_regexp:
          type: string
          format: regex
          description: >
            This is needed if you're generating this filter from metric tags.  The regular expression is used to find the correct tag on each metric.  The matching tag values will become the filter values. Only useful if a metric_key is also defined.
        allow_multi:
          type: boolean
          default: false
          description: > 
            Whether or not to allow the selection of multiple filter values within the dropdown menu...typically only used with filters that are populated from metric tags.
        values:
          type: array
          items:
            type: object
            properties:
              label:
                type: string
                description: Human readable value displayed in dropdown.
              value:
                type: string
                description: Key used to reference in code.
          description: >
            Needed if you're generating this filter from preset values.  It is list of objects, each one containing label and value properties.  Only used in system dashboards.  
          example:
            - label: Nodes
              value: nodes
            - label: Applications
              value: apps
        default_value:
          type: string
          description: >
            Needed if you're generating this filter from preset values.  The value from the preset list of 'values' property which will be selected by default.
          example: "apps"
        is_nav_root:
          type: boolean
          default: false
          description: >
             Only one is allowed per tab.  This indicates that this filter is special (it's usually used in combination with preset filter values); instead of just limiting the range of items shown on the page through tag filtering, this nav_root filter is changing the root items altogether. When used along with a filter-based dependency, this can completely change how a tab is rendered and show different widgets based on what this nav_root value is. This special status also has other effects, such as exiting all selections when this filter is changed, and changing how the breadcrumbs are rendered to use this filter as the root breadcrumb instead of as a second-level filter breadcrumb.
    CustomDashboardDependency:
      type: object
      required:
        - condition
      properties:
        metric_key:
          type: string
          description: >
            The unique metric_key for the metrics group containing the metric you're evaluating (if this is a metric dependency). If the metrics group contains multiple metrics, only the first metric will be evaluated.
          example: f1513f29-5b56-4623-bedb-a125bbc1caaa
        filter:
          type: string
          description: >
            If this is a filter dependency, the key for the filter being evaluated.
          example: "view"
        selection_id:
          type: integer
          description: >
            If this is a selection dependency, the unique selection ID integer for the selection being evaluated.
          example: 1
        condition:
          type: string
          enum:
            - exists
            - value
            - value_not
          description: > 
            This specifies how this dependency is to be evaluated.  Allowed options are - 
              exists (can be used with metric & selection dependencies) the dependency will succeed if the selection or metric exists at all
              value (can be used with metric & filter dependencies) the dependency will succeed if the metric or filter value matches the supplied value_regexp
              value_not (can be used with metric dependencies) the dependency will succeed if the metric value does not match the supplied value_regexp.
          example: "exists"
        value_regexp:
          type: string
          description: >
            Needed when condition is value or value_not.  A regular xxpression to match against the metric/filter value. If condition is value and the regex matches, then the dependency succeeds, or if condition is value_not and the regex fails, then the dependency also succeeds.
          example: ^OK\\:[1-9]
        failure_markup:
          type: string
          description: >
           This is used when this dependency is used as a tab dependency or a standard widget dependency, in which case an error message is shown upon dependency failure. This contains an HTML-formatted error message to be shown in that instance, and may contain the following placeholders.
            [% check_uuid %] this is commonly used in link URLs
            [% check_id %] this is commonly used in link URLs
            [% account_url %] this is the account URL prefix, commonly used in link URLs
            {value} useful when used with condition value or value_not in which case the actual metric/filter value will replace this placeholder
            {noun} will be replaced by the type of item being evaluated, e.g. "We couldn't find the metrics needed to show this {noun}".
          example: "Error:<code> {value}.</code><br /><br />We couldn't find the metrics needed to show this {noun}."
    CustomDashboardTab:
      type: object
      required:
        - order
        - label
        - custom_layout
        - widgets
      properties:
        order:
          type: integer
          description: >
            Used to set the rendering order of the tabs in the tab bar.
          example: 1
        label:
          type: string
          description: >
            This label is what's actually shown in the UI tab itself, while the tab name property is used for the URL path.
          example: Overview
        dependency:
          type: array
          items:
            type: string
          minItems: 0
          description: >
            The keys of the dependencies to be evaluated when attempting to render this tab. If the dependency fails, it should return an error message which will be shown in place of the tab's widgets. If multiple dependencies are specified, they will be evaluated in order, and the first failure will stop evaluation of subsequent dependencies. See "CustomDashboardDependency" for more info on dependencies.
          example: ["dns"]
        custom_layout:
          type: array
          items:
            type: array
            minItems: 1
            maxItems: 12
            items:
              type: integer
              minimum: 1
              maximum: 12
          minItems: 1
          description: > 
            An array of layout rows (each row is a sub-array) specifying widget layout widths. Each sub-array represents a layout section (rendered as a single row) and should contain integers. Each integer is the width of a widget slot, and the sum of all widget slots in any section sub-array must be 12.
          example: [[2,2,2,2,2,2],[4,4,4],[4,8]]
        widgets:
          type: object
          description: >
            An object with numbered properties which correspond to the widget slots available in the specified layout. Each numbered property holds the widget UUID for a widget config object specified in the dashboard widgets property.
    CustomDashboardYAxisObject:
      type: object
      properties:
        title:
          type: string
          description: A title to show beside the axis.
          example: "Single Core %"
        min:
          type: number
          description: >
            The lower boundary of the axis range.  If not specified it will be set automatically.
          example: 0.1
        max:
          type: number
          description: >
            The upper boundary of the axis range.  If not specified it will be set automatically.
          example: 100
    CustomDashboardMetricQuery:
      type: object
      properties:
        title:
          type: string
          description: >
            A title for this metric query, for display in a list of currently-saved queries to choose from.
          example: Disk IO Time (all checks)
        _query_uuid:
          type: string
          readOnly: true
          description: >
            The UUID for this metric query. May be set once when creating the query, but not when editing a query.
          example: f1513f29-5b56-4623-bedb-a125bbc1caaa
        _last_modified_on:
          type: integer
          readOnly: true
          description: >
            Timestamp when the object was last updated.  This is the number of seconds since the UNIX epoch.
          example: 1382104711
        _last_modified_by:
          type: string
          readOnly: true
          description: >
            The object id of the last user to modify this object.
          example: /user/2345
        query:
          type: string
          description: >
            The IRONdb search query used to find this group's metric streams. When used in system-dashboards, it should contain a check UUID tag to restrict the search to the current check, using a check UUID placeholder: [% check_uuid %]. Each metric query object must contain either a query property or a caql property, but not both.
          example: io_time and(collector:disk,__check_uuid:[% check_uuid %])
        caql:
          type: string
          description: >
            The CAQL query used to find this group's metric streams. Each metric query object must contain either a query property or a caql property, but not both.
          example: find:counter("ex`_aggregate","and(__check_uuid:849f73c9-9a3d-8fd2-ab38-9876ba27abcd)") | anomaly_detection(50) | label("anomaly detection - caql")
        stream:
          type: boolean
          description: >
            Whether or not this query's metrics should be streamed in real-time.
        transform:
          type: string
          default: average
          enum:
            - average
            - counter
            - derive
          description: >
            The type of values this group's metrics contain.
        units:
          type: string
          description: >
            Units to append to this group's metric values wherever they are displayed. Any units specified here will override the defaults (defaults are: blank for "average" metrics and /s for counter metrics). E.g. you will want to set the units to % when displaying a percentage.
          example: "%"
        is_shared:
          type: boolean
          description: >
            Whether or not this query is made available to be shared amongst multiple dashboards. If false, it should be deleted when the dashboard using it is deleted.
    CustomDashboardSynthetic:
      type: object
      required:
          - stream
          - synth_type
          - synth_tag
      properties:
        stream:
            type: boolean
            description: >
                Whether or not this group's metrics should be streamed in real-time.
        synth_type:
            type: string
            enum:
              - tag_count
              - tag_sum
              - tag_mean
              - multi_metric_=1
              - date_as_ago
              - segment_as_ago
            description: >
              This specifies which technique we should use when generating this synthetic.  tag_count looks at all values of the specified tag and counts how many metrics have each tag value; each tag value/count will generate a separate metric
                tag_sum looks at all values of the specified tag and sums the values of all metrics having each particular tag value (it sums "tag:foo" separately from "tag:bar"); each tag value/sum will generate a separate metric
                tag_mean looks at all values of the specified tag and gets the mean of the values of all metrics having each particular tag value (it calculates "tag:foo" separately from "tag:bar"); each tag value/mean will generate a separate metric
                multi_metric_=1 looks at multiple metric groups and finds the metrics which have values of 1 for each value of the specified tag, then each tag value will generate a separate metric which has a text value corresponding to the source metric whose value was 1
                date_as_ago transforms metrics with values specified as timestamp epoch seconds/milliseconds into new metrics with values of readable time segments such as "6 hrs"
                segment_as_ago transforms metrics with values specified in arbitrary segments of seconds/milliseconds into new metrics with values of readable time segments such as "6 hrs"
        synth_key:
            type: string
            format: uuid
            description: >
                Needed for all types except for multi_metric_=1; this is the unique metric_key for the group containing the metrics you're using to generate this synthetic
            example: "f1513f29-5b56-4623-bedb-a125bbc1caaa"
        synth_tag:
          type: string
          description: >
            This is the tag category or regular expression string which indicates the set of values used to create new metrics. Each tag value will generate a new synthetic metric which will be tagged with that tag & tag value. If a regular expression string is provided, only the first matched tag will be used; also, do not include beginning/ending string matches or a colon, because the regular expression string will be wrapped like this: '^'+ synth_tag +'\\:'
          example: "(k8s-)?app(\\.kubernetes\\.io\\/name)?"
        synth_extra_tags:
          type: array
          description: >
            An array of extra tag categories that you want to be transferred from the source metrics to the new synthetic metrics. May be a simple list if the tags are coming from the same source metrics as the main synth_tag, e.g. ["pod"]. May also be a list of objects specifying tags to pull from other sets of metrics.
          items:
            type: object
            description: Synthetics Extra Tags Object
            required:
              - metric_key
              - link_tag
              - pull_tags
            properties:
              metric_key:
                type: string
                format: uuid
                description: The unique key of the metric group from which to pull these extra tags.
                example: f1513f29-5b56-4623-bedb-a125bbc1caaa
              link_tag:
                type: string
                description: >
                  The tag category of the tag to use when matching these metrics for pulling tags, e.g. pod (if a newly-generated synthetic metric had a tag of pod:foo then the corresponding "extra tags" metrics would be searched to find a metric with that same tag, then the extra tags will be pulled from that metric).
                example: "pod"
              pull_tags:
                type: array
                items: 
                  type: string
                description: >
                  Aan array of tag categories of the tags you want to be transferred to the new synthetic metric.
                example: ["node","namespace"]
        synth_units:
          type: string
          enum:
            - seconds
            - milliseconds
          description: >
            Needed for either date_as_ago or segment_as_ago to indicate the source units.
        synth_multi_kv:
          type: object
          description: >
            Only needed for multi_metric_=1; this is a mapping from metric keys to the text values to be assigned to the synthetic metric if the matching metric in the corresponding metric group has a value of 1.  Tthe keys are the unique metric keys, the values are the corresponding text strings to use as values.
          example: { "cntrs_ready":"ready", "cntrs_waiting":"waiting" }
        metric_group:
          type: object
          description: >
            Any "metrics" group properties you wish to assign to the new synthetic metric(s). Typically used for things like units.
          example: {"units":"s"}
    CustomDashboardWidgetBase:
      description: Base class of properties shared by all Widgets
      type: object
      required:
        - widget_type
      properties:
        _widget_uuid:
          type: string
          readOnly: true
          description: >
            The UUID for this widget. May be set once when creating the widget, but not when editing a widget.
          example: f1513f29-5b56-4623-bedb-a125bbc1caaa
        widget_type:
          type: string
          enum:
            - counts_grid
            - graph
            - health_bar
            - list
            - single
            - table
            - tile_map
          description: The type of this widget.
          example: graph
        dependency:
          type: array
          minItems: 0
          items:
            type: string
          description: >
            The keys of the dependencies to be evaluated when attempting to render this widget. If the dependency fails, it should return an error message which will be shown in place of the widget's contents. If multiple dependencies are specified, they will be evaluated in order, and the first failure will stop evaluation of subsequent dependencies. See "CustomDashboardDependency" for more info on dependencies.
        alt_dependency:
          type: array
          minItems: 0
          items:
            type: string
          description: >
            The name of one or more dependencies to be evaluated when attempting to render this widget. If a dependency fails (following the same rules as standard dependencies, above), this widget configuration will not be used but will be replaced with the alternate widget configuration specified by alt_widget property.
        alt_widget:
          type: object
          description: >
            If an alt_dependency fails, the containing widget will be replaced by the contents of this property. This may contain an entire widget configuration, including having its own alternate widget dependency (thus alternate widgets may be nested as deep as you need to nest them).
          additionalProperties:
            anyOf:
              - $ref: "#/components/schemas/CustomDashboardWidgetCountsGrid"
              - $ref: "#/components/schemas/CustomDashboardWidgetGraph"
              - $ref: "#/components/schemas/CustomDashboardWidgetHealthBar"
              - $ref: "#/components/schemas/CustomDashboardWidgetList"
              - $ref: "#/components/schemas/CustomDashboardWidgetSingle"
              - $ref: "#/components/schemas/CustomDashboardWidgetTable"
              - $ref: "#/components/schemas/CustomDashboardWidgetTileMap"
            discriminator:
              propertyName: widget_type
        vis_dependency:
          type: array
          minItems: 0
          items:
            type: string
          description: >
            The key of one or more dependencies to be evaluated when attempting to render this widget. If the dependency fails (following the same rules as standard dependencies, above), this widget will not be shown at all and its holding cell will be visibly hidden.
        block_streaming:
          type: boolean
          default: false
          description: >
            If specified, the widget will not be updated every time a new streaming value comes in.
    CustomDashboardWidgetCountsGrid:
      description: Grid Widget
      allOf:
        - $ref: "#/components/schemas/CustomDashboardWidgetBase"
        - type: object
          required:
            - count_items
          properties:
            title:
              type: string
              description: >
                The title of what this widget is looking at.
              example: Item Counts
            hide_title:
              type: boolean
              default: false
              description: If the title should be hidden.
            count_items:
              type: array
              description: >
                An array containing sub-arrays. Each sub-array will be rendered as a section of the grid, with rules between sections (horizontal when wide, vertical when narrow). Each sub-array contains one or more count objects.
              items:
                type: array
                items:
                  type: object
                  required:
                    - metric_key
                    - source
                    - label
                  properties:
                    metric_key:
                      type: string
                      format: uuid
                      description: >
                        The unique metric_key for the metrics group containing the metrics you're counting; may be blank if this is an empty "spacer" grid item.
                      example: f1513f29-5b56-4623-bedb-a125bbc1caaa
                    source:
                      type: string
                      enum:
                        - value_count
                        - value_sum
                      description: >
                        How the metrics are to be counted.
                        value_count count the number of metrics, using each metric's value and val_criteria to determine whether or not to count that metric
                        value_sum sum together the values of each metric...this is most useful if you have existing, segmented "count" metrics which you're combining.
                    data_formula:
                      type: string
                      description: >
                        A formula to apply to all values before they're rendered.  It is applied before the display_formula. Must contain a "VAL" placeholder. It may also contain metric placeholders if metrics' values need to be used in the formula: e.g. "{METRIC:agent_threads:1}" where the second part is the unique metric_key for the group containing the metric being referenced, and the third part is the default value to use if the specified metric has no value.
                      example: "=VAL/1000"
                    val_criteria:
                      type: string
                      description: > 
                        Needed if source is value_count; this indicates how to know if we should count a metric or not.  =1 means this metric is only counted if its value is 1.
                      example: "=5"
                    label:
                      type: string
                      description: >
                        The count item title/header; may contain HTML; may be blank if this is an empty "spacer" grid item.
                      example: "Bytes"
    CustomDashboardWidgetGraph:
      description: Graph Widget
      allOf:
        - $ref: "#/components/schemas/CustomDashboardWidgetBase"
        - type: object
          required:
            - title
            - metrics
          properties:
            title:
              type: string
              description: The title of what this graph is showing
              example: Containers Waiting
            metrics:
              type: array
              description: An array of Graph metric objects
              items:
                type: object
                required:
                  - metric_key
                  - tag
                  - y2_axis
                description: Graph Metric object
                properties:
                  metric_key:
                    type: string
                    format: uuid
                    description: >
                      The unique metric key for the metrics group containing the desired capacity metrics.
                    example: f1513f29-5b56-4623-bedb-a125bbc1caaa
                  data_cache_key:
                    type: string
                    description: >
                      A key indicating the data retrieved from this metric group, usually based on the metric_key; it's used to share cached data across widgets. If multiple widgets are using the same metrics and should avoid loading their data repeatedly, give them the same data_cache_key.
                    example: dns_fwd_requests:pod
                  group_label:
                    type: string
                    description: >
                      A label to apply to the stream
                    example: CPU
                  tag:
                    type: array
                    minItems: 0
                    items: 
                      type: string
                    description: >
                      The tag category of things displayed in this widget if you want to group the streams by tag (e.g. a tag of 'node' would be used to find things tagged as 'node:*'), and it's also used for human readable messages if type isn't specified. When multiple tags are passed, each unique combination of the tag values is treated as a unique stream in the graph and labels are created by combining all the tags' values together if group_label isn't specified. 
                    example: ["node","namespace"]
                  tag_regexp:
                    type: string
                    description: >
                      To specify a tag category when the specific tag category might vary, use this regexp to match an appropriate tag from the metric_group. Whichever tag is matched will be used in place of tag above.
                    example: "^(k8s-)?app(\\.kubernetes\\.io\\/name)?\\:"
                  tag_separator:
                    type: string
                    description: >
                      A separator to use when multiple tags are specified and no group_label is specified. The separator is used to combine the tags' values together when creating labels; if omitted, a space is used when needed.
                    example: "-"
                  type:
                    type: string
                    description: >
                      Optional override of the widget type property.   A human-readable type of things displayed in this widget.
                    example: "Override Text"
                  data_formula:
                    type: string
                    description: >
                      A formula to apply to all values before they're rendered.  It is applied before the display_formula. Must contain a "VAL" placeholder. It may also contain metric placeholders if metrics' values need to be used in the formula: e.g. "{METRIC:agent_threads:1}" where the second part is the unique metric_key for the group containing the metric being referenced, and the third part is the default value to use if the specified metric has no value.
                    example: "=VAL/1000"
                  display_formula:
                    type: string
                    description: >
                      A formula to apply to all values before they're displayed.  Often used to improve readability.  It is applied after the data_formula.  Must contain a "VAL" placeholder. May use special functions: "=bytes(VAL)" to render the values in binary bytes, or "=format({format_string},VAL)" to use sprintf formatting.
                    example: "=format('%1$.3g',VAL)"
                  axis_label_formula:
                    type: string
                    description: >
                      A formula to apply to values when preparing them for use as y axis labels.  Similar to display_formula. Any available display_formula will be used if axis_label_formula is empty.
                    example: "=format('%1$f%2$s',VAL,'%')"
                  data_op:
                    type: array
                    items: 
                      type: string
                      enum:
                        - pass
                        - groupby_sum
                        - groupby_mean
                        - sum
                        - mean
                      default: pass
                    description: >
                      These are operations to be performed on the streams when fetching the data. The operations will be performed serially starting with the first item in the array.
                        pass (default) means the streams are not grouped or manipulated at all
                        groupby_sum groups the streams by the tag param and calculates a sum over the grouping
                        groupby_mean groups the streams by the tag param and calculates a mean over the grouping
                        sum calculates the sum across all streams
                        mean calculates the mean across all streams.
                  y2_axis:
                    type: boolean
                    description: >
                      Whether to show on the right y2 axis instead of the left y1 axis. WARNING - having two y axes isn't compatible with all other features.  It doesn't work with capacity mode or list view.
            graph_type:
              type: string
              enum:
                - line
                - area
                - column
              default: line
              description: >
                The type of graph to render.  A line graph, an area graph (the areas under the lines are filled), or a column graph (where the time series data is graphed using columns instead of lines).
              example: "column"
            group_label:
              type: string
              description: >
                A label to apply to values when shown and the entire widget when a selection is present, if you want to override the group_label from the metrics objects.
              example: "Crash Loops"
            type:
              type: string
              description: >
                The type of things displayed in this widget, used for human readable messages. May be omitted if only a single tag is passed, in which case tag will be made human readable for messages.
              example: "request"
            capacity:
              type: object
              description: >
                Specify capacity metrics to allow switching between "standard values" and values which are "normalized to % of capacity". If capacity metrics are specified which correspond to those in the first main metric group, an "f(x)" function menu will be shown to allow switching between the two modes. NOTE - capacity mode is incompatible with multiple metric groups.
              properties:
                metric_key:
                  type: string
                  format: uuid
                  description: >
                    The unique metric key for the metrics group containing the desired capacity metrics.
                  example: f1513f29-5b56-4623-bedb-a125bbc1caaa
                tag:
                  type: array
                  minItems: 0
                  description: >
                    The tag category/categories to use when matching metrics to their capacity metrics, if different from the standard tag.
                  items:
                    type: string
                  example: ["node"]
                y_axis_title:
                  type: string
                  description: >
                    A title to show beside the y axis when in capacity mode.
                  default: "% of Capacity"
                  example: "% of Capacity"
                data_cache_key:
                  type: string
                  description: >
                    A key indicating the data retrieved from the capacity metric group; it's used to share cached data across widgets (see data_cache_key in parent object).
                data_formula:
                  type: string
                  description: >
                    A formula to apply to all values before they're rendered.  It is applied before the display_formula. Must contain a "VAL" placeholder. It may also contain metric placeholders if metrics' values need to be used in the formula: e.g. "{METRIC:agent_threads:1}" where the second part is the unique metric_key for the group containing the metric being referenced, and the third part is the default value to use if the specified metric has no value.
                  example: "=VAL/1000"
                data_op:
                  type: array
                  items: 
                    type: string
                    enum:
                      - pass
                      - groupby_sum
                      - groupby_mean
                      - sum
                      - mean
                    default: pass
                  description: >
                    These are operations to be performed on the streams when fetching the data. The operations will be performed serially starting with the first item in the array.
                      pass (default) means the streams are not grouped or manipulated at all
                      groupby_sum groups the streams by the tag param and calculates a sum over the grouping
                      groupby_mean groups the streams by the tag param and calculates a mean over the grouping
                      sum calculates the sum across all streams
                      mean calculates the mean across all streams.
            y_axis:
              type: object
              description: Left y1 axis configuration.
              allOf:
                - $ref: "#/components/schemas/CustomDashboardYAxisObject"
            y2_axis:
              type: object
              description: Right y2 axis configuration.
              allOf:
                - $ref: "#/components/schemas/CustomDashboardYAxisObject"
            breakdown_list:
              type: object
              description: >
                This specifies that (if the list isn't hidden) it will be a breakdown list (a table, really) instead of a bar list. This is useful if the graph shows counts per tag/category, then the breakdown list can show the individual items which fall under those tags/categories.
              required:
                - list_cols
              properties:
                metric_key:
                  type: string
                  format: uuid
                  description: >
                    A unique key for a metrics group containing metrics to use for the breakdown list items. If specified, the breakdown list items will be pulled from these metrics instead of the main metrics.
                  example: f1513f29-5b56-4623-bedb-a125bbc1caaa
                filter_criteria:
                  type: string
                  description: >
                    If specified, this indicates how metrics from the main/breakdown group will be chosen. "=1" indicates that a metric will only be included if it has a value of 1.  "=tag" indicates that a metric will only be included if it has a value of the tag value corresponding to the tag param (this in particular is designed to work with a breakdown metric group).
                  example: "=tag"
                list_cols:
                  type: array
                  description: >
                    An array of objects which specifies the columns for the list, showing individual tag values in a tabular format instead of just the graph series' label (like the bar list);
                  items:
                    type: object
                    properties:
                      label:
                        type: string
                      tag:
                        type: string
                  example: {"label":"Container","tag":"container"}
                hist_headers:
                  type: boolean
                  default: false
                  description: >
                    A boolean indicating whether to hide the breakdown category headers. Useful if there's only one category and the header would be redundant.
            hide_list_mode:
              type: boolean
              default: false
              description: >
                If true, don't render list mode and hide the list/graph mode toggles.
            colors:
              type: array
              items:
                type: string
                format: CSS color
              description: >
                An array of CSS colors. If using non-indexed colors, then each stream's latest value will be mapped to these colors as a spectrum. If using indexed colors, each stream will be mapped to these colors according to its index in the stream array. May be either default_indexed or default_spectrum if you wish to use the default color sets for indexed or spectrum color mapping.
              example: ["#FF9900", "rgb(255,120,0)", "rgba(255,120,0,0.5)"]
            index_based_colors:
              type: boolean
              default: false
              description: >
                If specified, then each stream's color is based on its index, not its last value.
            stacked:
              type: boolean
              default: false
              description: >
                Whether to stack the data series instead of rendering them independently.
            guides:
              type: array
              description: >
                An array of objects, each one specifying a data formula for a horizontal guide
              items:
                type: object
                description: Graph Guide Object
                required:
                  - data_formula
                properties:
                  data_formula:
                    type: string
                    description: >
                      An infix formula beginning with = but NOT including a VAL placeholder. It may be a simple value like =1 or it may be any valid formula like =10/1000*2. It may also contain metric placeholders if metrics' values need to be used in the formula: e.g. "{METRIC:agent_threads:1}" where the second part is the unique metric_key for the group containing the metric you're referencing, and the third part is the default value to use if the specified metric has no value.
                    example: "={METRIC:agent_threads:1}/{METRIC:total_cores:1}"
                  color:
                    type: string
                    format: CSS color
                    description: A color to override with.
                    example: "#FF9900"
            selections:
              type: array
              description: >
                An array of selection objects.  Each must take the responder role (the TileMap widget is currently the only widget that may take the generator role to generate a selection)
              items:
                type: object
                description: Graph Selection Object
                required:
                  - id
                  - role
                  - content
                properties:
                  id: 
                    type: integer
                    description: >
                      Selections are sorted by this id when the breadcrumbs are determining the order to show the selections in.
                    example: 1
                  role: 
                    type: string
                    enum:
                      - responder
                    description: >
                      Must be responder, indicating this widget will respond to this selection.
                  default_value:
                    type: string
                    description: >
                      A full tag for a selected item, if the widget should initially render as having responded to this selection.
                    example: "pod:foo"
                  title:
                    type: string
                    description: >
                      A title to use for this widget when showing a selection response.  It will be followed by ": {selected_item}". If no title is specified, it will be constructed from any available group_label and tag.
                    example: "CPU per pod (avg)"
                  content:
                    type: object
                    description: >
                      An object indicating how the existing content is to be treated or how new content is to be shown when responding to this selection.
                        { "type":"highlight" } this highlights the appropriate item (it's the default option).
                        { "type":"refetch" } this filters the metrics and re-fetches the data when responding to a selection; this is particularly useful in cases where the metrics are being summed or averaged, so the component metrics need to be filtered and the data re-fetched.
                    required:
                      - type
                    properties:
                      type:
                        type: string
                        enum:
                          - highlight
                          - refetch
    CustomDashboardWidgetHealthBar:      
      description: Health Bar widget
      allOf:
        - $ref: "#/components/schemas/CustomDashboardWidgetBase"
        - type: object
          required:
            - title_noun
            - aspects
          properties:
            title_noun:
              type: integer
              description: >
                The noun referring to the thing we're measuring the health of
              example: Cluster
            aspects:
              type: array
              description: >
                An array of objects indicating the different health categories we're examining.
              items:
                type: object
                required:
                  - title
                  - q
                  - healthy_text
                  - table_cols
                properties:
                  title:
                    type: string
                    description: The title of what this aspect is looking at.
                    example: Crash Loops
                  q:
                    type: array
                    minItems: 1
                    description: >
                      The circonus alert search query/queries used to find alerts for this aspect. May contain placeholders: [% check_uuid %], [% check_id %], or [% account_url $] (account_url is the current account's url prefix). Internally we use lookup keys to match specific alerts, but any alert search string will work. The query should always contain check_id/uuid tag to isolate the search to the current check, along with "active:1" to ensure only active alerts are returned.  If multiple queries are provided (in an array), the search results will be combined and displayed together.
                    items:
                      type: string
                    example: ["(lookup_key:\"k8s_health_cpu\")(check_id:[% check_id %])(active:1)"]
                  healthy_text:
                    type: string
                    description: >
                      Text or HTML to display for this aspect if no alerts are found.
                    example: There are currently no container crash loops.
                  unhealthy_text:
                    type: string
                    description: >
                      Text or HTML to display underneath the alerts list if there are one or more alerts for this aspect.
                    example: This status means there is a mismatch between something or other.
                  table_class:
                    type: string
                    description: >
                      Additional classes to apply to this aspect's alerts list table; usually used to pass wide or wider classes to force the tables wider for when the alert table content is known to be longer.
                    example: wide
                  table_cols:
                    type: array
                    description: >
                      An array of objects specifying which tags to pull info from and display in table columns when showing the list table of alerts.
                    items:
                      type: object
                      description: A Health Bar Alert Table Column Property
                      required:
                        - label
                        - tag
                      properties:
                        label:
                          type: string
                          description: The label for this column.
                          example: "Name"
                        tag:
                          type: string
                          description: >
                            The tag category to use when pulling this column's value from this alert's tags, e.g. if the tag is namespace then that tag's value will be shown in this column.  This can either be a tag, or the "{value}" macro to represent the alerting metric's value.
                          example: "namespace"
                        width:
                          type: number
                          minimum: 1
                          maximum: 100
                          description: >
                            If the table column widths aren't automatically adjusting to look good, you may specify the percentage width of the columns here.
    CustomDashboardWidgetList:      
      description: List Widget
      allOf:
        - $ref: "#/components/schemas/CustomDashboardWidgetBase"
        - type: object
          required:
            - content_source
          properties:
            title:
              type: string
              description: >
                The title of what this widget is looking at.
              example: Events
            hide_title:
              type: boolean
              default: false
              description: > 
                If true, a title won't be shown.
            content_source:
              type: string
              enum:
                - metric
                - content_array
              description: >
                Where the list's contents are coming from, either from metric values or from static predefined content.  
            content_items:
              type: array
              items:
                type: string
              description: > 
                Needed if content_source is content_array; an array of HTML strings to be displayed as the list content.
              example: ["Check <code>/sys/devices/*/ioerr_cnt</code>","Check <code>smartctl</code>","Trace the IO subsystem for error response codes."]
            metrics:
              type: array
              description: >
                Needed if content_source is text_metric; an array of metric objects.
              items:
                type: object
                description: List Widget Metric Object
                required:
                  - metric_key
                properties:
                  metric_key:
                    type: string
                    description: >
                      The unique metric key for the metrics group containing the metrics being shown.
                    example: f1513f29-5b56-4623-bedb-a125bbc1caaa
            align_with_graphs:
              type: boolean
              default: false
              description: >
                If true, padding is added above the list content so that the list content will vertically align with graph widgets which are beside this widget.
            type:
              type: string
              description: >
                The type of things displayed in this widget, used for human readable messages.
              example: "event"
            show_rate_graph:
              type: boolean
              default: false
              description: >
                If true, a graph will be shown above the list which shows the rate of how often each text metric has new values (only available if content_source is text_metric).
            show_search:
              type: boolean
              default: false
              description: >
                If true, a search field will be shown above the list for searching/filtering list contents.
            colors:
              type: array
              nullable: true
              items:
                type: string
                format: CSS Color
              minItems: 1
              maxItems: 1
              description: >
                Needed if show_rate_graph is true; an array of css color strings; the first color will be used for all rate graph series.  Despite only allowing a single value, this is an array for consistency with other objects.
              example: ["#FF9900"]
            format:
              type: object
              nullable: true
              description: >
                An object specifying how the list items are encoded, if other than plain text/HTML; currently only JSON is supported.
              required:
                - language
                - value_property
                - postscript_property
              properties:
                language:
                  type: string
                  enum:
                    - JSON
                  description: >
                    The language that each value is formatted in.
                value_property:
                  type: string
                  description: >
                    The property of the decoded list item object which holds the item value to be shown.
                  example: "message"
                postscript_property:
                  type: string
                  description: >
                    The property of the decoded list item object which holds the item postscript to be shown underneath the item value.
                  example: "creationTimestamp"
                postscript_is_time:
                  type: boolean
                  default: false
                  description: >
                    Whether the postscript is a timestamp/epoch value (can be in either milliseconds or seconds).
                postscript_units:
                  type: string
                  default: milliseconds
                  enum:
                    - seconds
                    - milliseconds
                  description: >
                    What units the postscript timestamp is specified in.
                postscript_as_ago:
                  type: boolean
                  default: false
                  description: > 
                    Whether to show a postscript timestamp as "X mins ago" instead of the full date and time.
    CustomDashboardWidgetSingle:      
      description: Single Metric Widget
      allOf:
        - $ref: "#/components/schemas/CustomDashboardWidgetBase"
        - type: object
          required:
            - metrics
          properties:
            title:
              type: string
              description: >
                The title of what this widget is showing the status of.
              example: Load 1 Min
            metrics:
              type: array
              maxItems: 1
              description: >
                An array of metric objects, although only the first will be used.
              items:
                type: object
                description: Single Widget Metric Object
                required:
                  - metric_key
                properties:
                  metric_key:
                    type: string
                    description: >
                      The unique metric key for the metrics group containing the metrics being shown.
                    example: f1513f29-5b56-4623-bedb-a125bbc1caaa
                  data_cache_key:
                    type: string
                    description: >
                      A key indicating the data retrieved from this metric group, usually based on the metric_key; it's used to share cached data across widgets. If multiple widgets are using the same metrics and should avoid loading their data repeatedly, give them the same data_cache_key.
                    example: "f1513f29-5b56-4623-bedb-a125bbc1caaa:node"
                  data_formula:
                    type: string
                    description: >
                      A formula to apply to all values before they're rendered.  It is applied before the display_formula. Must contain a "VAL" placeholder. It may also contain metric placeholders if metrics' values need to be used in the formula: e.g. "{METRIC:agent_threads:1}" where the second part is the unique metric_key for the group containing the metric being referenced, and the third part is the default value to use if the specified metric has no value.
                    example: "=VAL/1000"
                  display_formula:
                    type: string
                    description: >
                      A formula to apply to all values before they're displayed.  Often used to improve readability.  It is applied after the data_formula. Must contain a "VAL" placeholder. May use special functions: "=bytes(VAL)" to render the values in binary bytes, or "=format({format_string},VAL)" to use sprintf formatting.
                    example: "=format('%1$.3g',VAL)"
                  data_op:
                    type: string
                    nullable: true
                    enum:
                      - pass
                      - sum
                      - mean
                    default: pass
                    description: >
                      The operation used when combining the values of multiple metrics or when fetching data for the sparkline.
                        pass (default) means the first metric stream will be used by itself
                        sum calculates the sum across all streams
                        mean calculates the mean across all streams.
            show_sparkline:
              type: boolean
              default: false
              description: >
                Whether or not to show a sparkline underneath the main value display (for numeric metrics only).  If true, the colors property should be set as well.
            colors:
              type: array
              nullable: true
              items:
                type: string
                format: CSS color
              description: >
                Needed if show_sparkline is true; an array of css color strings; the first color will be used for the sparkline series.  If the first string in the array is "default_indexed" to use the default indexed color set.
              example: ["default_indexed"]
    CustomDashboardWidgetTable:
      description: Counts Table Widget
      allOf:
        - $ref: "#/components/schemas/CustomDashboardWidgetBase"
        - type: object
          required:
            - column_items
          properties:
            title:
              type: string
              description: >
                The title of what this widget is looking at
              example: Pods
            hide_title:
              type: boolean
              default: false
              description: If true, a title won't be shown.
            type:
              type: string
              description: >
                The type of things displayed in this widget, used for human readable messages.
              example: pod
            column_items:
              type: array
              description: >
                An array of objects describing the table columns, with one object per column.
              items:
                type: object
                description: A Table Widget Column Properties object
                required:
                  - metric_key
                  - source
                  - find_tag_regexp
                  - width
                properties:
                  metric_key:
                    type: string
                    description: >
                      The unique metric key for the metrics group containing the metrics being shown for this column.
                    example: f1513f29-5b56-4623-bedb-a125bbc1caaa
                  source:
                    type: string
                    enum:
                      - tag
                      - value
                    description: >
                      Won each metric is this column's value being pulled from.  Either from a metric tag, or from a metric's latest value.
                  data_formula:
                    type: string
                    description: >
                      A formula to apply to all values before they're rendered.  It is applied before the display_formula. Must contain a "VAL" placeholder. It may also contain metric placeholders if metrics' values need to be used in the formula: e.g. "{METRIC:agent_threads:1}" where the second part is the unique metric_key for the group containing the metric being referenced, and the third part is the default value to use if the specified metric has no value.
                    example: "=VAL/1000"
                  display_formula:
                    type: string
                    description: >
                      A formula to apply to all values before they're displayed for readability.  It is applied after the data_formula. Must contain a "VAL" placeholder. May use special functions: "=bytes(VAL)" to render the values in binary bytes, or "=format({format_string},VAL)" to use sprintf formatting.
                    example: "=format('%1$.3g',VAL)"
                  is_table_key:
                    type: boolean
                    default: false
                    description: >
                      Whether or not this is the key column in the table; each table needs one key column. The key column metrics are looped through to enumerate the rows of the table, then their tags are used to pull data for the other columns.
                  find_tag_regexp:
                    type: array
                    items:
                      type: string
                    description: >
                      Needed for columns which are not table keys; may be an empty string for table key columns or for CAQL streams. Contains a regular expression string or array of them, for finding which metric to pull this item from. If multiple regexp are specified, all must be matched. Placeholders are supported: use {{field_name}} to match the value of a previously-found column (e.g. if a column is named pod_name then for subsequent columns you could find ^pod\\:{{pod_name}}).
                    example: "^pod\\:{{pod_name}}"
                  val_tag_regexp:
                    type: string
                    description: >
                      Needed if source is tag; a regular expression string for finding which tag to pull this column from; e.g. ^node\\: would pull the value from the node tag on the found metric.
                    example: "^node\\:"
                  name:
                    type: string
                    description: >
                      A name for this item if you want to use its value in a placeholder when finding a later item (see "find_tag_regexp).
                  label:
                    type: string
                    description: The column header, if desired.
                    example: Pods
                  width:
                    type: number
                    minimum: 5
                    multipleOf: 5
                    description: >
                      Column width, in increments of 5 (e.g. 5 or 10 or 15). All column widths must total 100 to render correctly.
    CustomDashboardWidgetTileMap:
      description: Tile Map Widget
      allOf:
        - $ref: "#/components/schemas/CustomDashboardWidgetBase"
        - type: object
          required:
            - title
            - metrics
          properties:
            title:
              type: string
              description: The title of what this grid is showing.
              example: Containers Waiting
            metrics:
              type: array
              description: >
                An array of metric objects; If multiple metric groups are specified, then a dropdown switching menu will be offered to let you switch between them.
              items:
                type: object
                description: Tile Map Metric Object.  Either tag or tag_regexp are required.
                required:
                  - metric_key
                properties:
                  metric_key:
                    type: string
                    description: >
                      The unique metric key for the metrics group containing the metrics being shown.
                    example: f1513f29-5b56-4623-bedb-a125bbc1caaa
                  group_label:
                    type: string
                    description: >
                      A label to apply to values when they're shown.  Will also be shown in the switching menu.
                    example: CPU
                  tag:
                    type: string
                    description: >
                      The tag category of things displayed in this widget (e.g. a tag of node will be used to find things tagged as node:*), and it's also used for human readable messages if type isn't specified. May be omitted if a tag_regexp is specified instead.
                    example: node
                  tag_regexp:
                    type: string
                    description: >
                      If a specific tag category is desired but the tag category might vary, use this regexp to match an appropriate tag from the metric_group. Whichever tag is matched will be used in place of tag above.
                    example: “^(k8s-)?app(\\.kubernetes\\.io\\/name)?\\:”
                  data_formula:
                    type: string
                    description: >
                      A formula to apply to all values before they're rendered.  It is applied before the display_formula. Must contain a "VAL" placeholder. It may also contain metric placeholders if metrics' values need to be used in the formula: e.g. "{METRIC:agent_threads:1}" where the second part is the unique metric_key for the group containing the metric being referenced, and the third part is the default value to use if the specified metric has no value.
                    example: "=VAL/1000"
                  display_formula:
                    type: string
                    description: >
                      A formula to apply to all values before they're displayed.  Often used for readability.  It is applied after the data_formula. Must contain a "VAL" placeholder. May use special functions: "=bytes(VAL)" to render the values in binary bytes, or "=format({format_string},VAL)" to use sprintf formatting.
                    example: "=format('%1$.3g',VAL)"
            type:
              type: string
              description: >
                The type of things displayed in this widget, used for human readable messages. It may be omitted if only a single tag is passed, in which case tag will be made human readable for messages.
              example: "app"
            shape:
              type: string
              enum:
                - hexagon
                - circle
                - diamond
                - square
              default: hexagon
              description: >
                Which shape to use when rendering the tilemap.
            colors:
              type: array
              items:
                type: string
                format: CSS color
              minItems: 1
              default: ["rgb(64,64,64)"]
              description: >
                An array of CSS colors. Each metric's latest value will be mapped to these colors as a spectrum. Alternatively, a single item can be passed to utilize a preset Circonus color spectrum (blues, reds, or greens).  e.g. ["blues"]
              example: [“rgb(250,172,25)“,”rgb(230,108,41)“,”rgb(209,62,55)“]
            selections:
              type: array
              description: >
                An array of selection objects.  Each must take either the responder role (responding to the selection from another widget) or the generator role (generating the selection from user actions).  The TileMap widget is currently the only widget that may take the generator role.
              items:
                oneOf:
                  - type: object
                    description: A Tile Map Selection Generator Object.  A tag OR tag_regexp is required.
                    required:
                      - id
                      - role
                    properties:
                      id:
                        type: integer
                        description: >
                          Selections are typically numbered; it could technically be any number or string, but the selections are sorted by this id when the breadcrumbs are determining the order to show the selections in, so integers are the easiest type of value to use here.
                        example: 1
                      role:
                        type: string
                        enum:
                          - generator
                        description: >
                          Identifier that this is a generator object.
                      tag:
                        type: string
                        description: >
                          This specifies which tag is used as the selected item tag. It should be a tag category with no tag value, e.g. node or pod, and the "selection" generated is the entire tag: category & value.
                        example: pod
                      tag_regexp:
                        type: string
                        description: >
                          If the specific tag might vary, use this regexp to match an appropriate tag from the streamtags. Whichever tag is matched will be used in place of tag above.
                  - type: object
                    description: A Tile Map Selection Responder Object
                    required:
                      - id
                      - role
                    properties:
                      id:
                        type: integer
                        description: >
                          Selections are typically numbered; it could technically be any number or string, but the selections are sorted by this id when the breadcrumbs are determining the order to show the selections in, so integers are the easiest type of value to use here.
                        example: 1
                      role:
                        type: string
                        enum:
                          - responder
                        description: >
                          Identifier that this is a responder object. 
                      default_value:
                        type: string
                        description: > 
                          A full tag for a selected item, if the widget should initially render as having responded to this selection.
                        example: "pod:foo"
                      title:
                        type: string
                        description: >
                          A title to use for this widget when showing a selection response; will be followed by ": {selected_item}". If no title is specified, it will be constructed from any available group_label and tag.
                        example: "CPU per pod (avg)"
                      content:
                        type: object
                        description: >
                          An object indicating how the existing content is to be treated or how new content is to be shown when responding to this selection.
                        properties:
                          type: 
                            type: string
                            enum:
                              - highlight
                              - filter
                              - list
                            default: highlight
                            description: >
                              Indicates what to do when a user selected a grid item.  Highlight the object.  Filter uses the selected tag to filter the hexes by that item.  List will change to show the content list instead of the grid.
                          list_type:
                            type: string
                            enum:
                              - simple
                              - bar
                            description: >
                              For list types, the type of list.  Simple shows one item per line.  Bar shows multiple items in a bar list (like a table), one item per column, with the items list repeated per line.
                          list_items:
                            type: array
                            description: >
                              For list types, this is an array of the content in the list.
                            items:
                              type: object
                              description: A Tile Map Selection List Item object
                              required:
                                - metric_key
                                - source
                                - find_tag_regexp
                                - name
                              properties:
                                metric_key:
                                  type: string
                                  description: >
                                    The unique metric key for the metrics group containing the metric you want to use in this list item.
                                  example: f1513f29-5b56-4623-bedb-a125bbc1caaa
                                source:
                                  type: string
                                  enum:
                                    - tag
                                    - value
                                  description: >
                                    Where this list item should pull its value from; either a metric tag or a metric value.
                                  example: tag
                                data_formula:
                                  type: string
                                  description: >
                                    A formula to apply to all values before they're rendered.  It is applied before the display_formula. Must contain a "VAL" placeholder. It may also contain metric placeholders if metrics' values need to be used in the formula: e.g. "{METRIC:agent_threads:1}" where the second part is the unique metric_key for the group containing the metric being referenced, and the third part is the default value to use if the specified metric has no value.
                                  example: "=VAL/1000"
                                find_tag_regexp:
                                  type: array
                                  minItems: 1
                                  items:
                                    type: string
                                  description: >
                                    A array of regular expression strings for finding which metric to pull this item from; if multiple RegExp are specified, all must be matched. Multiple placeholders are supported:
                                      {{selection}} finds a metric tagged with the current selection tag,
                                      e.g. ^{{selection}}.
                                      {{selection_cat}} finds a metric tagged with the current selection tag category,
                                      e.g. ^{{selection_cat}}\\:foo.
                                      {{selection_val}} finds a metric tagged with the current selection tag value,
                                      e.g. ^pod\\:{{selection_val}}.
                                      {{field_name}} matches the value of a previously-found item in this list; e.g. if a list item is named pod_name then for subsequent items you could find ^pod\\:{{pod_name}}.
                                  example: ["^pod\\:{{selection_val}}"]
                                val_tag_regexp:
                                  type: string
                                  description: >
                                    Needed if source is tag. It's a regular expression string for finding which tag to pull this list item from. E.g. ^node\\: would pull the value from the node tag on the found metric.
                                  example: "^node\\:"
                                name:
                                  type: string
                                  description: > 
                                    A name for this list item for reference elsewhere.
                                  example: "os_image"
                                label: 
                                  type: string
                                  description: >
                                    Only used if list_type is simple. It's a label for this item when rendered as a simple list item.
                                  example: "OS Image"

    DashboardGridLayout:
      type: object
      properties:
        height:
          type: integer
          minimum: 4
          description: The number of rows in the dashboard.
        width:
          type: integer
          minimum: 4
          maximum: 26
          description: The number of columns in the dashboard.
      example: { height: 4, width: 4 }
    DashboardAccessConfigOption:
      type: object
      properties:
        black_dash:
          type: boolean
          description: Whether to show the shared dashboard in black-dash mode.
        enabled:
          type: boolean
          description: Whether this shared dashboard is valid and enabled (for temporarily disabling shares if desired).
        fullscreen:
          type: boolean
          description: Whether to show the shared dashboard in fullscreen mode.
        fullscreen_hide_title:
          type: boolean
          description: Whether the title bar will be hidden when the shared dashboard is viewed.
        nickname:
          type: string
          description: Nickname for identifying this share in the UI dialog.
        scale_text:
          type: boolean
          description: Whether to auto-scale dashboard text or not.
        shared_id:
          type: string
          description: An ID, a string that must be unique among access_configs.
        text_size:
          type: integer
          default: 16
          description: Text size (in points) to use for rendering the dashboard, if scale_text is set to false.
    DashboardOptions:
      type: object
      properties:
        fullscreen_hide_title:
          type: boolean
          default: false
          description: Whether the title bar will be hidden when the dashboard is viewed at fullscreen.
        hide_grid:
          type: boolean
          default: false
          description: Whether to hide the grid behind the widgets displaying the cell coordinate.
        scale_text:
          type: boolean
          default: true
          description: Whether to auto-scale dashboard text or not.  Font is 16pt at 4 columns, and gets smaller with more columns added.
        access_configs:
          type: array
          items:
            $ref: "#/components/schemas/DashboardAccessConfigOption"
          description: Configurations for shared dashboards with similar options to main dashboards.
        linkages:
          type: array
          items:
            type: array
            minItems: 2
            items:
              type: string
              description: A widget id.
          description: >
            Groups linking widgets together. Currently only alerts widgets can be linked; when linked, their charts
            will share the same y-axis for easy visual comparison.
          example: [["w1", "w3"], ["w2", "w4"]]
        text_size:
          type: integer
          default: 16
          description: The text size (in points) to use for rendering the dashboard, if scale_text is set to false.

    DashboardWidgetAlertSettingsObject:
      type: object
      required:
        - acknowledged
        - cleared
        - dependents
        - display
        - maintenance
        - time_window
      properties:
        account_id:
          type: integer
          minimum: 1
          description: >
            The ID of the account to use when fetching alerts to display. Required if you wish to view alerts
            for an account other than the one you are logged into when viewing a Dashboard. You can find Account
            IDs on your User Profile page.
          example: 1234
        acknowledged:
          type: string
          enum:
            - y
            - n
            - all
          description: >
            Whether to consider the acknowledgement state of an alert when choosing the alerts to
            display. 'y' (only acknowledged alerts) | 'n' (only unacknowledged alerts) | 'all'
            (both aknowledged and unacknowledged alerts)
        cleared:
          type: string
          enum:
            - y
            - n
            - all
          description: >
            Whether to consider the active state of an alert when choosing the alerts to display.
            'y' (only cleared alerts) | 'n' (only active alerts) | 'all' (both cleared and active alerts)
        contact_groups:
          type: array
          items:
            type: integer
          description: >
            Contact groups to consider; only alerts which were sent to one or more of the specified contact
            groups will be included.  Note that these are just the integer ids, not the full cids.
          example: [1234, 1235]
        dependents:
          type: string
          enum:
            - y
            - n
            - all
          description: >
            Whether to consider if an alert has dependents when choosing the alerts to display.
            'y' (only alerts with dependents) | 'n' (only alerts without dependents) | 'all' (both alerts with and without dependents)
        display:
          type: string
          enum:
            - list
            - bar
            - sunburst
          description: The method to use when displaying the alerts.
          example: list
        maintenance:
          type: string
          enum:
            - y
            - n
            - all
          description: Whether to consider the maintenance state of an alert when choosing the alerts to display. 'y' (only in-maintenance alerts) | 'n' (only out-of-maintenance alerts) | 'all' (both in- and out-of-maintenance alerts)
        min_age:
          type: string
          pattern: ^0|\d+[mhdwMy]$
          default: 0
          description: How new alerts can be and still be displayed; alerts will be displayed if they're older than {min_age} ago. '0' (now) or a time interval (e.g. '30m', '6h', '2d', '1w', etc.)
          example: 30m
        off_hours:
          type: array
          items:
            type: integer
            minimum: 0
            maximum: 23
          minItems: 2
          maxItems: 2
          default: [0, 0]
          description: >
            The thresholds used to indicate potential 'off hours' of personnel by shading the bar or sunburst background.
            e.g., [17,9] would set off hours' from 5pm to 9am. NOTE: to disable 'off hours' shading, set both numbers to the same value.
          example: [17, 9]
        search:
          type: string
          maxLength: 1024
          description: Any search string you'd like to use when choosing which alerts to show.
        severity:
          allOf:
            - $ref: "#/components/schemas/SeveritiesAsString"
          description: >
            The severity levels to include; only alerts which occurred with the specified severity levels will be included. A string concatenating one or more of the following sev levels: '1', '2', '3', '4', '5'; e.g., '12345'
          default: 12345
        tag_filter_set:
          deprecated: true
        time_window:
          type: string
          pattern: ^\d+[mhdwMy]$
          description: >
            How old alerts can be and still be displayed; alerts will be displayed if they're newer than {time_window} ago. <time_interval> (e.g. '30m', '6h', '2d', '1w', etc.)
          example: 6h
        title:
          type: string
          maxLength: 1024
          description: A custom title to use
          default: ""
        week_days:
          type: array
          items:
            type: string
            enum:
              - sun
              - mon
              - tue
              - wed
              - thu
              - fri
              - sat
          default: ["sun", "mon", "tue", "wed", "thu", "fri", "sat"]
          description: The days of the week to include; only alerts which occurred on the specified days will be included.
    DashboardWidgetChartDatapointMetric:
      type: object
      required:
        - label
        - metric
      properties:
        _check_id:
          type: string
          # TODO - this might be integer actually?  docs unclear
          readOnly: true
          description: The id of the check containing this metric.
        _metric_type:
          type: string
          readOnly: true
          description: The metric type of the datapoint.
        label:
          type: string
          maxLength: 1024
          description: Label to show on the chart itself.
        metric:
          type: string
          maxLength: 1024
          # TODO - this max length needs to be extended to 4k+uuid for modern metric name sizes
          description: uuid + metric name combo, consisting of <check_uuid>:<metric_name>
    DashboardWidgetChartDatapointCluster:
      type: object
      deprecated: true
      required:
        - cluster_id
      properties:
        _cluster_title:
          type: string
          readOnly: true
          description: The title of the specified metric cluster.
        cluster_id:
          type: integer
          minimum: 1
          description: The ID of the specified metric cluster.
        numeric_only:
          type: string
          enum:
            - true
          description: An indicator to the cluster expansion system that this widget can only accept numeric metrics.
          default: true
    DashboardWidgetChartSettingsObject:
      type: object
      required:
        - chart_type
        - datapoints
      properties:
        chart_type:
          type: string
          enum:
            - pie
            - bar
          description: The type of chart to render.
          example: pie
        datapoints:
          type: array
          # TODO - is this an array of either of them, or two named keys: cluster/metric, which are an array?  Charlie?
          items:
            anyOf:
              - $ref: "#/components/schemas/DashboardWidgetChartDatapointMetric"
              - $ref: "#/components/schemas/DashboardWidgetChartDatapointCluster"
          description: An array of the datapoints to show on the chart, or metric clusters to expand into datapoints at render time.
        definition:
          type: object
          required:
            - datasource
            - derive
            - legend
            - period
            - pop_onhover
            - title
          properties:
            datasource:
              type: string
              enum:
                - realtime
              description: >
                The source of data for this chart; currently has only one option: "realtime"
            derive:
              type: string
              enum:
                - gauge
                - derive
                - counter
              description: >
                Numeric type of values. Note: pie charts CANNOT use 'derive' since they can't plot negative values
            disable_autoformat:
              type: boolean
              default: false
              description: Whether to disable auto-formatting of values using standard metric prefixes ('k', 'M', 'm', et al.)
            formula:
              type: string
              maxLength: 1024
              description: >
                If desired, specify a formula to run over the value after it's returned (can use infix notation or RPN, like graph datapoint formulas).
              default: ""
            legend:
              type: object
              description: Options for pie chart legends.
              required:
                - show
                - type
              properties:
                show:
                  type: boolean
                  description: Whether to render the pie chart legend. Must be true for {wedge_labels.tooltips} to have any effect.
                type:
                  type: string
                  enum:
                    - html
                  description: >
                    Type of legend to render. Currently has only one option: "html".
            period:
              type: integer
              minimum: 0
              maximum: 30000
              description: Realtime streaming update period, in milliseconds (0 means 'automatic' and the value will be returned at each check's configured period).
            pop_onhover:
              type: boolean
              description: When hovering over a pie wedge, whether to pop that wedge out as a hover effect.
            wedge_labels:
              type: object
              properties:
                on_chart:
                  type: boolean
                  default: true
                  description: Whether to show the wedge labels directly on the wedges themselves.
                tooltips:
                  type: boolean
                  default: false
                  description: Whether to show the pie chart legend values when hovering over a wedge.
              default: { "on_chart": true, "tooltips": false }
            wedge_values:
              description: Options relating to pie wedge values.
              default: { "show": true, "angle": 0, "color": "background" }
              type: object
              properties:
                angle:
                  type: string
                  enum:
                    - 0
                    - default
                    - parallel
                  default: 0
                  description: How to orient the wedge values, if shown directly on the wedges.
                color:
                  type: string
                  enum:
                    - background
                  default: background
                  description: >
                    How to render the wedges; currently has only one option: "background"
                show:
                  type: boolean
                  default: true
                  description: Whether to show the wedge values directly on the wedges themselves.
        title:
          type: string
          maxLength: 1024
          description: The title for the widget.
    DashboardWidgetClusterSettingsObject:
      type: object
      required:
        - algorithm
        - cluster_id
        - cluster_name
        - layout
        - size
      properties:
        algorithm:
          type: string
          enum:
            - cor
          description: >
            The algorithm to use when comparing cluster members. Currently has only one option: "cor"
          example: cor
        cluster_id:
          type: integer
          minimum: 1
          description: The ID of the specified metric cluster.
        cluster_name:
          type: string
          maxLength: 1024
          description: The name/title of the specified metric cluster.
        layout:
          type: string
          enum:
            - compact
          description: The layout to use. Currently has only one option, "compact"
          example: compact
        size:
          type: string
          enum:
            - small
            - medium
            - large
          description: How large to make the cluster member squares.
        threshold:
          type: number
          minimum: 0
          maximum: 1
          description: >
            The approximate level of health needed for a cluster member to be considered healthy. Any
            member with a health below this level will be considered "bad". NOTE: This is a "fuzzy"
            value and as such, is not extremely precise.
          default: 0.7
    DashboardWidgetForecastSettingsObject:
      type: object
      required:
        - format
        - resource_limit
        - resource_usage
        - thresholds
        - title
        - trend
      properties:
        format:
          type: string
          enum:
            - standard
            - largest
          description: >
            How to display the time remaining: either display the three largest units in a standard time
            format, or only display the one largest unit as a decimal.
        resource_limit:
          type: string
          maxLength: 1024
          description: The threshold to watch. Can be either an integer/floating point constant or a CAQL statement.
        resource_usage:
          type: string
          maxLength: 1024
          description: A CAQL statement calculating the data which is trending toward the resource_limit.
        thresholds:
          description: >
            The thresholds which indicate three segments of time remaining: 'good', 'warning', and 'danger'.
          type: object
          required:
            - values
          properties:
            colors:
              type: array
              minItems: 3
              maxItems: 3
              description: The colors used to indicate the threshold segments [#{good color}, #{warning color}, #{danger color}]
              items:
                type: string
                pattern: ^#[a-f0-9]{6}$
                format: hexcolor
              default: ["#008000", "#ffcc00", "#ee0000"]
            values:
              type: array
              minItems: 2
              maxItems: 2
              description: The thresholds used to indicate the urgency of time remaining (first threshold triggers the warning color, second triggers the danger color).
              items:
                type: string
                format: duration literal
              example: ["1d", "1h"]
        title:
          type: string
          maxLength: 1024
          description: The title of the widget.
          example: My Cool Widget
        trend:
          type: string
          enum:
            - auto
            - rising
            - falling
          description: Whether to automatically infer a trend from the usage data, or to assume a rising or falling trend.
    DashboardWidgetGaugeSettingsObject:
      type: object
      required:
        - check_uuid
        - metric_display_name
        - metric_name
        - period
        - range_high
        - range_low
        - thresholds
        - title
        - type
        - value_type
      properties:
        _check_id:
          type: string
          # TODO - this is probably an integer, not a cid
          readOnly: true
          description: The id of the check containing this metric.
        check_uuid:
          type: string
          format: uuid
          description: Check UUID for the specified metric.
        disable_autoformat:
          type: boolean
          default: false
          description: Whether to disable auto-formatting of values using standard metric prefixes ('k', 'M', 'm', et al.)
        formula:
          type: string
          maxLength: 1024
          description: If desired, specify a formula to run over the value after it's returned (can use infix notation or RPN, like graph datapoint formulas)
          default: ""
        metric_display_name:
          type: string
          maxLength: 1024
          # TODO - this is shorter than max metrici name length of 4k.  Fix.
          description: Display name for the specified metric. Only needed for display in the settings panel. Naming convention is "<check_display_name>:<metric_name> (on <host>, from <broker>)")
        metric_name:
          type: string
          maxLength: 1024
          # TODO - this is shorter than max metrici name length of 4k.  Fix.
          description: Name of the specified metric.
        period:
          type: integer
          minimum: 0
          maximum: 30000
          description: Realtime streaming update period, in milliseconds (0 means 'automatic' and the value will be returned at the check's configured period).
        range_high:
          type: number
          description: The high end of the value range shown on the gauge.
        range_low:
          type: number
          description: The low end of the value range shown on the gauge.
        thresholds:
          description: >
            These are the thresholds which indicate three segments of values: 'good', 'warning', and 'danger'.
          type: object
          required:
            - flip
          properties:
            colors:
              type: array
              description: The colors used to indicate the thresholded segments [#{good color}, #{warning color}, #{danger color}]
              items:
                type: string
                pattern: ^#(?:[a-f0-9]{3}|[a-f0-9]{6})$
                description: Hex color in the form #000 or #000000
              minItems: 3
              maxItems: 3
              default: ["#008000", "#ffcc00", "#ee0000"]
            flip:
              type: boolean
              description: Whether the colors should be flipped so the low segment is shown with the 'danger' color instead of the high segment.
            values:
              type: array
              description: The two thresholds used to indicate the segments.
              default: ["75%", "87.5%"]
              maxItems: 2
              minItems: 2
              items:
                type: string
                description: either an absolute value (e.g. "650", "10000", etc.) or relative value (e.g. "60%")
        title:
          type: string
          maxLength: 1024
          description: A custom title to use.
        type:
          type: string
          enum:
            - bar
            - dial
            - text
          description: Type of gauge display to use.
        value_type:
          type: string
          enum:
            - gauge
            - derive
            - counter
          description: Numeric type of value.  'gauge' (value) | 'derive' (change in value) | 'counter' (non-negative change in value)
    DashboardWidgetGraphSettingsObject:
      type: object
      required:
        - date_window
        - graph_id
        - show_flags
      properties:
        _graph_title:
          type: string
          readOnly: true
          description: Title of the graph used in this widget.
        date_window:
          type: string
          format: special - see description
          description: >
            The span of most recent time to display on the graph, if it's not set to 'global' and if
            {realtime} isn't enabled. If dual intervals are specified, the first is the past and the
            second is the future (e.g. show from 2 weeks ago to 1 week in the future).
            Allowed values: 'global' (follow the page datetool settings) | <time_interval> (e.g. '30m',
            '6h', '2d', '1w', etc.) | <dual_time_intervals> (e.g. '6h:12h', '1w:1w', etc.)
        graph_id:
          type: string
          format: uuid
          description: The UUID of the graph.
        hide_xaxis:
          type: boolean
          default: false
          description: Whether to hide the xaxis labels.
        hide_yaxis:
          type: boolean
          default: false
          description: Whether to hide the yaxis labels.
        key_inline:
          type: boolean
          default: false
          description: Whether to show items in the persistent legend key as inline text (like a paragraph) or as separate line-items.
        key_loc:
          type: string
          enum:
            - noop
            - in-tl
            - out-r
            - out-b
          default: noop
          description: Whether to show a persistent legend key beside the graph and where to position it. 'noop' (don't show key) | 'in-tl' (inside graph, top left corner) | 'out-r' (outside graph, on the right) | 'out-b' (outside graph, on the bottom)
        key_size:
          type: integer
          minimum: 0
          maximum: 25
          description: The size of the persistent legend key (if {key_loc} is in-tl' or 'out-r', this controls key width; if {key_loc} is 'out-b', this controls key height).
          default: 1
        key_wrap:
          type: boolean
          default: false
          description: Whether to wrap text within the persistent legend key.
        label:
          type: string
          maxLength: 1024
          default: ""
          description: The label to show at the top of the widget if you want it to show something other than the graph title.
        overlay_set_id:
          type: string
          maxLength: 1024
          default: ""
          description: The alphanumeric ID of an overlay set saved in the graph JSON, to be shown in this widget.
        period:
          type: integer
          minimum: 1000
          maximum: 30000
          default: 2000
          description: Realtime streaming update period, in milliseconds.
        realtime:
          type: boolean
          default: false
          description: Whether to plot streaming data in realtime instead of showing recent stored data.
        show_flags:
          type: boolean
          description: Whether to show the legend upon mouse hover.
    DashboardWidgetHTMLSettingsObject:
      type: object
      required:
        - markup
      properties:
        markup:
          type: string
          maxLength: 32768
          description: A custom body using HTML and CSS (In a <style> tag) ... no JavaScript allowed
        title:
          type: string
          maxLength: 1024
          description: A custom title.
          default: ""
    DashboardWidgetListSettingsObject:
      type: object
      required:
        - limit
        - type
      properties:
        account_id:
          type: integer
          description: The ID of the account to use when fetching items to list. Required if you wish to view items belonging to an account other than the one you are logged into when viewing a Dashboard. You can find Account IDs on your User Profile page.
          minimum: 1
        limit:
          type: integer
          minimum: 1
          maximum: 1000
          description: How many items to list (most recent items will be shown).
        search:
          type: string
          default: ""
          description: Any search string you'd like to use to choose which items to list.
          maxLength: 1024
        type:
          type: string
          enum:
            - graph
            - worksheet
          description: The type of items to list.
    DashboardWidgetStatusSettingsObject:
      type: object
      required:
        - content_type
      properties:
        account_id:
          type: integer
          description: The ID of the account to use when fetching items to list. Required if you wish to view items belonging to an account other than the one you are logged into when viewing a Dashboard. You can find Account IDs on your User Profile page.
          minimum: 1
        agent_status_settings:
          description: The settings for agent status content.
          type: object
          properties:
            search:
              type: string
              maxLength: 1024
              description: Any search string you'd like to use when choosing which brokers to show.
              default: ""
            show_agent_types:
              type: string
              enum:
                - both
                - public
                - enterprise
              description: The types of brokers to display. 'both' (all brokers) | 'public' (only public brokers) | 'enterprise' (only enterprise brokers)
            show_contact:
              type: boolean
              default: false
              description: Whether to show the broker contact group for enterprise brokers.
            show_feeds:
              type: boolean
              description: Whether to show the statuses of each broker's storage and fault detection feeds.
            show_setup:
              type: boolean
              default: false
              description: Whether to show the setup status of enterprise brokers.
            show_skew:
              type: boolean
              description: Whether to show the time skew of each broker.
            show_updates:
              type: boolean
              default: true
              description: Whether to show notifications of updates needed for enterprise brokers.
        content_type:
          type: string
          enum:
            - agent_status
            - host_status
          description: The type of content this widget is showing.
        host_status_settings:
          description: The settings for host status content.
          type: object
          properties:
            layout_style:
              type: string
              enum:
                - list
                - grid
                - compact
              description: The layout to use to display the hosts.
            search:
              type: string
              default: ""
              description: Any search string you'd like to use when choosing which hosts to show.
              maxLength: 1024
            sort_by:
              type: string
              enum:
                - host
                - checks
                - metrics
                - alerts
              description: How to sort the hosts being displayed. 'host' (hostname) | 'checks' (number of checks on each host) | 'metrics' (number of metrics on each host) | 'alerts' (number of alerts on each host)
            tag_filter_set:
              deprecated: true
    DashboardWidgetTextDatapointMetric:
      type: object
      required:
        - label
        - metric
      properties:
        label:
          type: string
          maxLength: 1024
          description: Label to show on the chart itself.
        metric:
          type: string
          maxLength: 1024
          # TODO - this max length needs to be extended to 4k+uuid for modern metric name sizes
          description: uuid + metric name combo, consisting of <check_uuid>:<metric_name>
    DashboardWidgetTextDatapointCluster:
      type: object
      deprecated: true
      required:
        - cluster_id
      properties:
        cluster_id:
          type: integer
          minimum: 1
          description: The ID of the specified metric cluster.
        numeric_only:
          type: string
          enum:
            - true
          description: An indicator to the cluster expansion system that this widget can only accept numeric metrics.
          default: true
    DashboardWidgetTextSettingsObject:
      type: object
      required:
        - datapoints
        - period
        - value_type
      properties:
        autoformat:
          type: boolean
          default: false
          description: Whether to auto-format numeric values using standard metric prefixes ('k', 'M', 'm', et al.)
        body_format:
          type: string
          maxLength: 1024
          description: A custom body to use if {use_default} is false.
        datapoints:
          description: An array of the datapoints to show in the HTML, or metric clusters to expand into datapoints at render time.
          type: array
          # TODO - is this an array of either of them, or two named keys: cluster/metric, which are an array?  Charlie?
          items:
            anyOf:
              - $ref: "#/components/schemas/DashboardWidgetTextDatapointMetric"
              - $ref: "#/components/schemas/DashboardWidgetTextDatapointCluster"
        period:
          type: integer
          minimum: 0
          maximum: 30000
          description: Realtime streaming update period, in milliseconds (0 means 'automatic' and the value will be returned at each check's configured period).
        title_format:
          type: string
          maxLength: 1024
          description: A custom title to use if {use_default} is false.
        use_default:
          type: boolean
          default: false
          description: Whether to use the default body and title templates for displaying a metric status.
        value_type:
          type: string
          enum:
            - gauge
            - derive
            - counter
          description: Humeric type of values.  gauge' (value) | 'derive' (change in value) | 'counter' (non-negative change in value)
    DashboardWidget:
      type: object
      properties:
        active:
          type: boolean
          description: Whether this widget is active or not.
        height:
          type: integer
          description: How many rows this widget occupies.
        name:
          type: string
          description: This is the "human readable" version of the widget type and must correspond to the type.
          enum:
            - Graph
            - Chart
            - Gauge
            - Text
            - Cluster
            - HTML
            - Status
            - List
            - Alerts
            - Forecast
        origin:
          type: string
          description: >
            The cell ID of the left top corner of this widget.  Widget layout on the Dashboard grid is
            determined by the grid_layout.width and grid_layout.height values along with the 'origin',
            'height', and 'width" values for each widget. The grid coordinates use letters across the x-axis
            and numbers down the y-axis, so the top left cell is "a0" the cell to its right is "b0" and the
            cell below it is "a1" and so on. It is not required to fill every block defined by grid_layout.height
            and grid_layout.width, but widgets whose height/widget exceed the size of the grid will be visually
            "truncated". If your widgets don't look right on screen, or appear to be overlapping one another,
            be sure to check the "origin", "width", and "height" for each widget in your JSON object.
          example: a0
          # TODO - I have removed the ascii drawing of the dashboard in the original docs.  It would be nice to PUT
          # that into the Circonus docs and link it from here, but it doesn't make sense in this context.
        settings:
          oneOf:
            - $ref: "#/components/schemas/DashboardWidgetAlertSettingsObject"
            - $ref: "#/components/schemas/DashboardWidgetChartSettingsObject"
            - $ref: "#/components/schemas/DashboardWidgetClusterSettingsObject"
            - $ref: "#/components/schemas/DashboardWidgetForecastSettingsObject"
            - $ref: "#/components/schemas/DashboardWidgetGaugeSettingsObject"
            - $ref: "#/components/schemas/DashboardWidgetGraphSettingsObject"
            - $ref: "#/components/schemas/DashboardWidgetHTMLSettingsObject"
            - $ref: "#/components/schemas/DashboardWidgetListSettingsObject"
            - $ref: "#/components/schemas/DashboardWidgetStatusSettingsObject"
            - $ref: "#/components/schemas/DashboardWidgetTextSettingsObject"
          description: The two key widget fields "type" and "name" define what type of widget it is. The "settings" field configures the widget; each different type of widget has its own settings that must be included.
        type:
          type: string
          enum:
            - graph
            - chart
            - gauge
            - text
            - cluster
            - html
            - status
            - list
            - alerts
            - forecast
          description: The type of widget.
        widget_id:
          type: string
          description: Widget ID for this widget. Must be unique to this dashboard. A common convention is to use 'w' + integer.
        width:
          type: integer
          description: How many columns this widget occupies.

    # Data stuff is pretty messy because of the unnamed multi-types in arrays, which are not well suited to swagger definitions
    DataObjectTimestamp:
      type: integer
      description: Epoch timestamp of the sample
      example: 1579187990
    DataObjectTimestampString:
      type: string
      description: Epoch timestamp of the sample, expressed as a string value.
      example: 1579187990
    DataNumericLegacyObject:
      type: object
      description: Full object of values available.  Any of these values may be selected in the other formats through the `format_fields` parameter
      properties:
        count:
          type: integer
          example: 2
        counter:
          type: number
          example: 9.54202747344971
        counter2:
          type: number
          example: 0.0651323795318603
        counter2_stddev:
          type: number
          example: 0
        counter_stddev:
          type: number
          example: 3.0154082775116
        derivative:
          type: number
          example: 9.54202747344971
        derivative2:
          type: number
          example: 0.0651323795318603
        derivative2_stddev:
          type: number
          example: 0
        derivative_stddev:
          type: number
          example: 3.0154082775116
        stddev:
          type: number
          example: 79
        value:
          type: number
          example: 12038427
    DataNumericLegacyFormat:
      type: array
      minItems: 2
      maxItems: 2
      uniqueItems: true
      items:
        anyOf:
          - $ref: "#/components/schemas/DataObjectTimestamp"
          - $ref: "#/components/schemas/DataNumericLegacyObject"
      description: >
        Each items in the array is another array, containing 2 fields.  The first is an integer, representing
        the epoch timestamp of the sample.  The second is an object, representing the sample, and its dereved values.
      example:
        [
          1579187990,
          {
            "count": 2,
            "counter": 9.54202747344971,
            "counter2": 0.0651323795318603,
            "counter2_stddev": 0,
            "counter_stddev": 3.0154082775116,
            "derivative": 9.54202747344971,
            "derivative2": 0.0651323795318603,
            "derivative2_stddev": 0,
            "derivative_stddev": 3.0154082775116,
            "stddev": 79,
            "value": 12038427,
            "example_format": "numeric legacy",
          },
        ]
    DataNumericTupleArray:
      type: array
      items: {}
      description: >
        Each item in the data array is another array, containing the fields specified in the `format_fields`
        parameter, in the ordering specified by the parameter.  The example assumes this is specified as "timestamp,value"
      example: [1467994140, 12038427, "example_numeric_format_tuple"]
    DataNumericObjectObject:
      type: object
      description: >
        Each item in the data array is an object, containing the fields specified in the `format_fields`
        parameter.  The example assumes this is specified as "timestamp,value"
      example:
        {
          timestamp: 1467994140,
          value: 12038427,
          example_format: "numeric object",
        }
    DataHistogramBucketObject:
      type: object
      description: >
        A variable number of buckets can be returned.  The keys of the object are stringified numbers
        that represent the lower-bound of a bucket where the upper range is the next value expressible
        in base 10 with two digits of precision. (e.g "0.12" expresses [0.12,0.13) and "990" expresses [990, 1000)).
        The values for each key are the number of samples in that bucket range.
      example: { "0.12": 14, "990": 5, "example": "example_histogram_format" }
    DataHistogramArray:
      type: array
      minItems: 3
      maxItems: 3
      uniqueItems: true
      items:
        anyOf:
          - $ref: "#/components/schemas/DataObjectTimestampString"
          - $ref: "#/components/schemas/DataHistogramBucketObject"
      description: >
        Histogram samples are expressed as three fields.  A epoch timestamp in string form, a period value in string form, and an object of histogram buckets.
    DataTextArray:
      type: array
      minItems: 2
      maxItems: 2
      items:
        type: string
      description: >
        Text data only returns the points in time where the text value changes, along with the new value.
      example: ["12038427", "ExampleTextValue"]
    Error:
      type: object
      properties:
        code:
          type: string
          example: "InputError.InvalidValue"
        status:
          type: integer
          format: int32
          example: 400
        explanation:
          type: string
          example: "The value passed was not valid"
        message:
          type: string
          example: "rpc error: code = InvalidArgument desc = invalid search query"
    ExternalContactMember:
      type: object
      properties:
        contact_info:
          type: string
          description: The specific contact info that Circonus should use.  Email, SMS number, etc.
          example: foo@example.com
        method:
          description: The method Circonus should use to contact the external contact (i.e., what kind of contact info is stored in contact_info).
          type: string
          enum:
            - email
            - sms
            - http
            - pagerduty
            - victorops
            - slack
    InternalContactMember:
      type: object
      properties:
        _contact_info:
          type: string
          readOnly: true
          description: A read only field showing the actual current stored contact details for the user for the given contact method. For informational purposes only.
        method:
          type: string
          enum:
            - email
            - sms
            - http
            - pagerduty
          description: The method Circonus should use to contact the user.
        user:
          type: string
          description: The _cid of the Circonus user to contact.
          example: /user/1234
    Result:
      type: object
      properties:
        options:
          type: object
        value:
          type: object
        type:
          type: string
        number:
          type: integer
          format: int64
        error:
          type: object
        data:
          type: object
        time:
          description: The time of the result in seconds since the Unix epoch.
          type: integer
          format: int64
    TagProperty:
      type: string
      description: >
        An associated tag.
        A tag is just a string, with or without a colon, such as 'foo', 'bar',
        'datacenter:london', or 'os:linux'. The part of the string before the
        colon is considered the category the tag is in; Tag strings without a
        colon will place the string in the 'uncategorized' category. Circonus
        will lowercase the contents of the string before storing it.
      example: datacenter:primary
    RolesEnum:
      type: string
      enum:
        - Admin
        - Normal
        - Read Only
      description: >
        A string containing 'Admin' (indicating the user can do anything), 'Normal' (indicating the user can change most things in the account other than account administration) or 'Read Only' (indicating the user can view, but not making changes to the account)
      example: Normal
    GraphAccessKey:
      type: object
      properties:
        active:
          type: boolean
        custom_zoom_levels:
          type: array
          items:
            type: string
        height:
          type: integer
          description: The height of the shared graph described as a number of pixels.
          example: 600
        key:
          type: string
          description: The secret key
          example: eBLX2z
        legend:
          type: boolean
          description: Controls if the shared graph should show a legend.
        lock_date:
          type: boolean
          description: Controls if the shared graph should allow changing of the date period that is being viewed.
        lock_mode:
          type: string
          nullable: true
          enum:
            - zoom
            - range
            -
          description: If the date range is locked, is it locked to a specific date range or zoomed to a range relative to the current time.  May be null.
        lock_range_end:
          type: integer
          nullable: true
          description: When using 'range' lock_mode, the latest time viewable on the shared graph, expressed as number of seconds since UNIX epoch.  May be null.
        lock_range_start:
          type: integer
          nullable: true
          description: When using 'range' lock_mode, the earliest time viewable on the shared graph, expressed as number of seconds since UNIX epoch.  May be null.
        lock_show_times:
          type: boolean
        lock_zoom:
          type: string
          nullable: true
          description: When using 'zoom' lock_mode, how much historic data to show on the shared graph relative to the current time.  May be null.
        nickname:
          type: string
          description: Private nickname for the share used in the web interface
          example: all websever data
        overlays:
          type: string
        title:
          type: boolean
          description: Should the shared graph show the title.
        width:
          type: integer
          description: The width of the shared graph as a number of pixels.
          example: 800
        x_labels:
          type: boolean
          description: Should the shared graph show the x labels?
        y_labels:
          type: string
          description: Should the shared graph show the y labels?
    GraphComposite:
      type: object
      properties:
        axis:
          type: string
          enum:
            - l
            - r
          description: Which axis the value will appear on. (l)eft, or (r)ight.
        color:
          type: string
          description: The RGB hex color for display.
          example: "#000000"
        data_formula:
          type: string
          nullable: true
          default: null
          example: =A-B
          description: Formula that should be applied to both the values in the graph, and the legend.
        hidden:
          type: boolean
          default: false
          description: If the datapoint should be hidden (not displayed on the graph).
        legend_formula:
          type: string
          nullable: true
          default: null
          description: Formula that should be applied to values in the legend.
        name:
          type: string
          description: A name which will appear in the graph legend.
          example: Time After First Byte
        stack:
          type: integer
          nullable: true
          default: null
          description: If this metric is to be stacked, which stack set does it belong to (starting at 0).
    GraphDataPoint:
      type: object
      properties:
        alpha:
          type: string
          minimum: 0
          maximum: 1
          nullable: true
          default: null
          description: Alpha channel value (string containing a floating point between 0 and 1).
        axis:
          type: string
          enum:
            - l
            - r
          description: Which axis the value will appear on. (l)eft, or (r)ight.
        caql:
          type: string
          description: CAQL formula for the data point (if applicable).
        check_id:
          type: integer
          minimum: 0
          example: 11641
          description: The check that this metric belongs to.
        color:
          type: string
          example: "#000000"
          description: The RGB hex color for display.
        data_formula:
          type: string
          default: null
          nullable: true
          example: =VAL/1000
          description: Formula that should be applied to both the values in the graph, and the legend.
        derive:
          oneOf:
            - type: string
            - type: boolean
          enum:
            - gauge
            - derive
            - counter
            - counter_stddev
          description: What derivative value, if any, should be used.  Returns false if none should be used.
        hidden:
          type: boolean
          example: false
          description: If the datapoint should be hidden (not displayed on the graph).
        legend_formula:
          type: string
          nullable: true
          default: null
          description: Formula that should be applied to values in the legend.
        metric_name:
          type: string
          example: duration
          description: The name of the metric.
        metric_type:
          type: string
          enum:
            - numeric
            - text
            - histogram
            - composite
            - caql
            - auto
          description: The type of the metric.
        name:
          type: string
          description: A name which will appear in the graph legend.
        search:
          type: string
          description: Metric search query.
        stack:
          type: integer
          description: If this metric is to be stacked, which stack set does it belong to (starting at 0).
    GraphGuide:
      type: object
      properties:
        color:
          type: string
          example: "#000000"
          description: The RGB hex color for display.
        data_formula:
          type: string
          nullable: true
          default: null
          example: =A-B
          description: Formula that should be applied to both the values in the graph, and the legend.
        hidden:
          type: boolean
          description: If the datapoint should be hidden (not displayed on the graph).
        legend_formula:
          type: string
          nullable: true
          default: null
          description: Formula that will determine where on the graph this guide will display.
        name:
          type: string
          description: A name of your guide.
    GraphMetricCluster:
      type: object
      properties:
        axis:
          type: string
          enum:
            - l
            - r
          description: Which axis the value will appear on. (l)eft, or (r)ight.
        color:
          type: string
          example: "#000000"
          description: The RGB hex color for display; only used if 'aggregate_function' is set.
        data_formula:
          type: string
          nullable: true
          default: null
          example: =A-B
          description: Formula that should be applied to both the values in the graph, and the legend.
        hidden:
          type: boolean
          example: false
          description: If the datapoint should be hidden (not displayed on the graph).
        legend_formula:
          type: string
          nullable: true
          default: null
          description: Formula that should be applied to values in the legend.
        metric_cluster:
          type: string
          deprecated: true
          description: The metric_cluster cid that will provide datapoints for this graph.
        name:
          type: string
          description: A name which will appear in the graph legend when editing the graph.
        stack:
          type: integer
          description: If this metric is to be stacked, which stack set does it belong to (starting at 0).
        aggregate_function:
          type: string
          enum:
            - none
            - min
            - max
            - sum
            - mean
            - geometric_mean
            -
          description: The aggregate function to apply across this metric cluster to create a single value.
    InviteObject:
      type: object
      required:
        - email
        - role
      properties:
        email:
          type: string
          format: RFC822 compatible email address
          description: A string containing an email address.
          example: irma.imaginary@example.com
        role:
          $ref: "#/components/schemas/RolesEnum"
    UserRoleObject:
      type: object
      required:
        - user
        - role
      properties:
        user:
          type: string
          description: _cid reference to the user.
          example: /user/1234
        role:
          $ref: "#/components/schemas/RolesEnum"
    MetricFilter:
      type: array
      items:
        type: array
        items:
          type: string
        minItems: 2
        maxItems: 5
      description: >
        Metric filters allow for a way to control what metrics are allowed, or excluded by the broker when they are encountered.
        Each rule must have a type (allow|deny) and regular expression to be evaluated on the metric name.  They may optionally
        also have a "tags" string, followed by a tag query (This is EXPERIMENTAL).
        They may then end in an optional comment.  Metric filters will
        be evaluated at the broker in the order you specified them,  Execution stops after a successful match, so ordering
        is important.  It is generally better to arrange your filter rules so that the most broadly applicable ones are
        earlier in the list than the more narrowly applicable ones.  The metric_filter regular expressions follow PCRE.
        They are case-sensitive. Modifiers may be used e.g. (?i)foo or (?i:foo) for case-insensitive matching.  The
        start-of-string and end-of-string anchors ^ and $ may also be used.  If the "tags" option pair is included, the
        second element is a tag query expression (https://www.irondb.io/docs/tag-queries.html) which must match the metric's
        stream tags for the rule to apply. The feature flag "Metric Filters with Tag Query" must be enabled for this to work.
        When using metric filters (with push-type checks which may be set to collect every metric encountered) Circonus will
        allow collection of metrics up to 25% over your account's metric limit for each check through the end of the billing
        period. At the end of the billing period, Circonus will adjust your metric limit according to the number of metrics
        you are collecting and the next cycle will allow you to collect 25% above that, and so on.  When this limit is hit,
        additional metrics will be filtered out.  These settings stay, so you will need to reset the filter by making a change
        in order to have that name re-evaluated, and accepted again.  Filtered vs accepted can be inspected by the return
        payload from the trap at submission time.  This allows you to push a large amount of data to Circonus without hitting
        your metric limit and potentially losing data until you are able to manually raise the limit. At the same time, it
        applies a reasonable brake on the number of metrics collected, in order to avoid an unintended deluge of metrics and
        larger than expected billing fees. Your sales manager at Circonus can raise or lower this limit at your request.
      example:
        - [type, regex]
        - [type, regex, comment]
        - [type, regex, "tags", tag_query]
        - [type, regex, "tags", tag_query, comment]
        - [
            "deny",
            "datacenter_.+V$",
            "tags",
            "and(env:dev)",
            "rule and a tag query with comment",
          ]
    MetricsObject:
      type: object
      properties:
        name:
          type: string
          description: The name of the metric
          example: tt_firstbyte
        type:
          type: string
          enum:
            - numeric
            - text
            - histogram
            - composite
            - caql
          description: The type of the metric
          # TODO - The old API docs refer to being able to change this value by also passing set_metric_type parameter.  This is not detailed here, and I'm not sure if it even work anymore since the type is no longer stored in Postgres, but in IRONdb.  Leaving it out for now, but this should be resolved or this TODO removed before we make this public.
        status:
          type: string
          enum:
            - active
            - available
          description: If the metric is 'active' (currently being collected) or merely 'available' (can be collected but isn't right now)
          example: active
        tags:
          type: array
          items:
            type: string
          deprecated: true
          description: An empty array.  This field has been deprecated.
          example: []
        units:
          type: string
          nullable: true
          description: The unit of measurement the metric represents (e.g., bytes, seconds, milliseconds).  May be null.
          example: milliseconds
      description: >
        When updating Metrics in an API call, any metrics that already exist on the check bundle
        and are not referenced in the PUT request are left unmodified.  `IMPORTANT`: Because this
        call will reach out to the broker to affect these changes it's possible to leave metrics
        in an inconsistant state if multiple calls attempt to deactivate or activate metrics one
        at a time in a loop.  To change multiple metrics at the same time they should all be put
        int a single list so that they can be updated in a single transaction.
    SeveritiesAsString:
      type: string
      pattern: ^[1-5]{1,5}$
      writeOnly: true
      maxLength: 5
      description: >
        A string concatenating one or more of the following sev levels: '1', '2', '3', '4', '5'; e.g., '12345'
      example: 135
    SeveritiesAsArray:
      type: array
      minItems: 0
      maxItems: 5
      uniqueItems: true
      items:
        type: integer
        minimum: 1
        maximum: 5
      example: [1, 3, 5]
    SeverityEscalationGroup:
      type: object
      properties:
        after:
          type: integer
          minimum: 300
          description: Number of seconds to wait until escalation for this severity.
          example: 900
        contact_group:
          type: string
          description: _cid of the contact group to escalate to.
          example: /contact_group/1234
    SeverityToContactGroupMapping:
      type: array
      items:
        type: object
        properties:
          1:
            type: array
            description: Severity 1 (highest) contact groups
            minItems: 0
            items:
              type: string
              format: Contact Group cid
              example: /contact_group/1234
          2:
            type: array
            description: Severity 2 contact groups
            minItems: 0
            items:
              type: string
              format: Contact Group cid
              example: /contact_group/1234
          3:
            type: array
            description: Severity 3 contact groups
            minItems: 0
            items:
              type: string
              format: Contact Group cid
              example: /contact_group/1234
          4:
            type: array
            description: Severity 4 contact groups
            minItems: 0
            items:
              type: string
              format: Contact Group cid
              example: /contact_group/1234
          5:
            type: array
            description: Severity 5 (lowest) contact groups
            minItems: 0
            items:
              type: string
              format: Contact Group cid
              example: /contact_group/1234
      description: A collection of contact_groups to contact at each severity level if this ruleset faults.  If no contact group are configured an alert will still be created, but no external notifications will be sent out.
      example:
        {
          1: [/contact_group/426, /contact_group/428],
          2: [/contact_group/428],
          3: [],
          4: [],
          5: [],
        }
    AccountUsageLimitsObject:
      type: object
      readOnly: true
      properties:
        _limit:
          type: integer
          example: 5000
        _type:
          type: string
          example: Host
        _used:
          type: integer
          example: 3203

    # Top level objects
    Account:
      type: object
      required:
        - name
        - timezone
        - users
      properties:
        _cid:
          type: string
          readOnly: true
          description: >
            A string containing an account cid
          example: /account/1234
        _contact_groups:
          type: array
          items:
            type: string
          readOnly: true
          description: >
            The list of contact groups available on this account
          example:
            - /contact_group/1701
            - /contact_group/3141
        _owner:
          type: string
          readOnly: true
          description: >
            The user whom owns this account
          example: /user/1234
        _ui_base_url:
          type: string
          readOnly: true
          description: >
            The base URL for this account in the Circonus UI.
          example: https://thisaccountsdomain.circonus.com/
        _usage:
          type: array
          items:
            $ref: "#/components/schemas/AccountUsageLimitsObject"
          readOnly: true
          description: >
            A list of usage limits that apply to this account and their current values
        address1:
          type: string
          maxLength: 500
          description: >
            The first line of the address associated with the account.
          example: 1600 Pennsylvania Ave
        address2:
          type: string
          maxLength: 500
          description: >
            The second line of the address associated with the account.
          example: Apt 56B
        cc_email:
          type: string
          maxLength: 500
          format: RFC822 compatible email address
          description: >
            Circonus invoices and receipts will be automatically emailed to the account owner. You can optionally specify another email address to add to the CC field of those emails.
          example: accounts_payable@yourdomain.com
        city:
          type: string
          maxLength: 500
          description: >
            The city part of the address associated with the account.
          example: New York City
        country_code:
          type: string
          description: >
            The country of the user's address.  This should be formatted as an ISO3166 alpha 2 style country code.
          example: US
        description:
          type: string
          maxLength: 500
          description: >
            Description of the account
          example: Example.com's Ops Group monitoring account
        invites:
          description: >
            Array of open invites on the account.  This array can be modified to remove existing invites, or add new ones.  Upon accepting, a user will automatically be removed from invites, and added to 'users.'
          type: array
          items:
            $ref: "#/components/schemas/InviteObject"
        name:
          type: string
          maxLength: 500
          description: >
            The name of the account
          example: example-ops
        state_prov:
          type: string
          description: >
            The state or province of the address associated with the account.
          example: NY
        timezone:
          type: string
          description: >
            The IANA timezone that events will be displayed in the web interface for this account.  API timestamps are always displayed as epoch seconds.
          example: America/New_York
        users:
          type: array
          items:
            $ref: "#/components/schemas/UserRoleObject"
          description: >
            An array of users and the roles they have been granted. Each user may appear only once in this array. You can modify this data structure to
            remove users or change roles, but you may not add new users to an account by altering this data structure.  To add/invite a user, add them
            to "invites."  Note: Removing a user from the account will also retire any API tokens that user created on the account. Any services using
            those tokens will stop working. If you wish, before removing a user, visit the API Tokens page to review the user's tokens. If
            you wish to preserve any of them, you can promote them to account-level tokens prior to removing the user.
    Acknowledgement:
      type: object
      required:
        - acknowledged_until
        - alert
      properties:
        _cid:
          type: string
          readOnly: true
          description: >
            A string containing an acknowledgement cid
          example: /acknowledgement/1234
        _acknowledged_by:
          type: string
          readOnly: true
          description: >
            The user that is acknowledging the alert. This is the user that created the acknowledgement (or, in the case of acknowledgements that have been deactivated, the user who deactivated this acknowledgement.)
          example: /user/2345
        _acknowledged_on:
          type: integer
          readOnly: true
          description: >
            Timestamp when the alert was acknowledged.  This is the number of seconds since the UNIX epoch.
          example: 1382104711
        _active:
          type: boolean
          readOnly: true
          description: >
            If this acknowledgement is still in effect or not.
          example: true
        _last_modified:
          type: integer
          readOnly: true
          description: >
            Timestamp when the object was last updated.  This is the number of seconds since the UNIX epoch.
          example: 1382104711
        _last_modified_by:
          type: string
          readOnly: true
          description: >
            The object id of the last user to modify this object.
          example: /user/2345
        acknowledged_until:
          type: string
          description: >
            The time this acknowledgement expires.  This is the number of seconds since the UNIX epoch.  Attempting to set this field to a value in the past will result in it being set to the current time.  As an alternative way to set this field, a string may be sent with the number of days, hours, minutes or seconds from "now" that the acknowledgement should expire.  This is a string containing an integers followed by "d", "h", "m" or "s" respectivly.  For example, "5m10s" would set it to expire 310 seconds after the call.
          example: 1382105011 or 1h30m30s
        alert:
          type: string
          description: >
            The object id of the alert that this acknowledgement acknowledges.
          example: /alert/1098869
        notes:
          type: string
          description: >
            User notes on the acknowledgement.
          example: Dave is dealing with this.
    Alert:
      type: object
      required:
        - acknowledged_until
        - alert
      properties:
        _cid:
          type: string
          readOnly: true
          description: >
            A string containing an alert cid
          example: /alert/1234
        _acknowledgement:
          type: string
          nullable: true
          readOnly: true
          description: >
            The active acknowledgement for this alert, or null if none.
          example: /acknowledgement/123
        _alert_url:
          type: string
          readOnly: true
          description: >
            Link to this alert in the Circonus UI.
          example: https://example.circonus.com/fault-detection/alerts/4378611
        _broker:
          type: string
          readOnly: true
          description: >
            The broker on which the data is collected.
          example: /broker/1234
        _check:
          type: string
          readOnly: true
          description: >
            The check that this alert corresponds to.
          example: /check/1234
        _check_name:
          type: string
          readOnly: true
          description: >
            The name of the check as displayed in the Circonus UI.
          example: Ping test
        _cleared_on:
          type: integer
          nullable: true
          readOnly: true
          description: >
            A positive integer that contains the number of seconds since the UNIX epoch.
          example: 1382141605
        _cleared_value:
          type: string
          nullable: true
          readOnly: true
          description: >
            If the alert cleared, the value that cleared all the rules.
          example: '"80.2"'
        _maintenance:
          type: array
          items:
            type: string
          readOnly: true
          nullable: true
          description: >
            A list of any active maintenance windows that pertain to this alert
          example:
            - /maintenance/456
        _metric_link:
          type: string
          nullable: true
          readOnly: true
          description: >
            A user defined link to external documentation for the metric that triggered this alert.
          example: http://example.com/docs/what_to_do_when/ping_fails.html
        _metric_name:
          type: string
          readOnly: true
          description: >
            The name of the metric that triggered this alert.
          example: latency
        _canonical_metric_name:
          type: string
          readOnly: true
          description: >
            The canonical name of the metric that triggered this alert.
          example: used|ST[units:percent,fs-mountpoint:/]
        _signature:
          type: string
          readOnly: true
          description: >
            Signature of the stream that triggered this alert.
        _metric_notes:
          type: string
          nullable: true
          readOnly: true
          description: >
            Documentation notes for the alert rules that triggered the alert.
          example: Run playbook 12.  Verify downstream services.
        _occurred_on:
          type: integer
          readOnly: true
          description: >
            When this alert first occurred expressed as the number of seconds since the UNIX epoch.
          example: 1382105011
        _rule_set:
          type: string
          readOnly: true
          description: >
            Rule set that contains the rules that triggered this alert.
          example: /rule_set/1234
        _severity:
          type: integer
          minimum: 1
          maximum: 5
          readOnly: true
          description: >
            The severity assigned to this alert by the rules in the ruleset.
          example: 1
        _tags:
          type: array
          items:
            $ref: "#/components/schemas/TagProperty"
          readOnly: true
          description: >
            The tags that were at the time assigned to the check bundle that triggered the alert. These serve as a historical record and cannot be altered by using either the API or GUI, nor can they be changed by altering the check bundles; Once the alert has been created they are immutable.
        _value:
          type: string
          readOnly: true
          description: >
            The value of the metric that triggered the alert.
          example: '"20.1"'
    Annotation:
      type: object
      required:
        - category
        - description
        - start
        - stop
        - title
      properties:
        _cid:
          type: string
          readOnly: true
          description: >
            A string containing an annotation cid
          example: /annotation/1234
        _created:
          type: integer
          readOnly: true
          description: >
            The point in time when this object was created, expressed as the number of seconds since the UNIX epoch.
          example: 1382104711
        _last_modified:
          type: integer
          readOnly: true
          description: >
            The point in time when this object was last changed, expressed as the number of seconds since the UNIX epoch.
          example: 1382104711
        _last_modified_by:
          type: string
          readOnly: true
          description: >
            The object id of the last user to modify this object.
          example: /user/2345
        category:
          type: string
          description: >
            The annotation category that this annotation belongs to.
          example: upgrades
        description:
          type: string
          description: >
            A description of the annotation.
          example: Installed holographic storage to improve performance.
        rel_metrics:
          type: array
          items:
            type: string
            description: >
              A string containing a fully qualified metric name in the format <digits>_<string>.
          description: >
            Metrics that are associated with this annotation
          example:
            - 54321_kbps
        start:
          type: integer
          description: >
            The point in time that the period this annotation applies to began, expressed as the number of seconds since the UNIX epoch.
          example: 1577923232
        stop:
          type: integer
          description: >
            The point in time that the period this annotation applies to ended, expressed as the number of seconds since the UNIX epoch.
          example: 15779268106
        title:
          type: string
          description: >
            A title of the annotation.
          example: Disk Upgrade
    BrokerDetails:
      type: object
      properties:
        cluster_ip:
          type: string
          description: >
            The IP address to which peer cluster nodes can communicate.
            A string containing a dotted quad formatted IP address.
        cn:
          type: string
          description: >
            The common name for the broker.
            A string containing the 'Common Name' part of the broker's SSL
            certificate.
        name:
          type: string
          description: >
            Shorthand name for broker node.
        external_host:
          type: string
          nullable: true
          description: >
            The publicly resolvable name the broker can be contacted on.
            A string containing a dotted quad formatted IP address or a DNS
            name.
        external_port:
          type: integer
          format: int64
          nullable: true
          minimum: 0
          maximum: 65535
          description: >
            The public facing port the broker responds to the Circonus HTTPS
            REST wire protocol on.
            An integer 0-65535 (or null, meaning 'default port').
        ipaddress:
          type: string
          nullable: true
          description: >
            The IP address address the broker can be contacted on.
            A string containing a dotted quad formatted IP address.
        minimum_version_required:
          type: integer
          format: int64
          minimum: 0
          description: >
            The minimum version of the broker software that is still compatible
            with circonus. If the broker's version is less than this, then it
            is unsupported.
            A number containing an integer greater than or equal to zero.
        modules:
          type: array
          description: >
            The modules (types of checks) this broker supports.
          items:
            type: string
            description: >
              The name of the check module.
              A string containing a check name, as listed in the broker
              documentation.
        port:
          type: integer
          format: int64
          nullable: true
          minimum: 0
          maximum: 65535
          description: >
            The port the broker responds to the Circonus HTTPS REST wire
            protocol on.
            An integer 0-65535 (or null, meaning 'default port')
        skew:
          type: string
          nullable: true
          description: >
            The clock drift between this broker and the Circonus server.
            A floating point number of seconds.
        status:
          type: string
          description: >
            The status of this particular broker.
            A string containing either 'active', 'unprovisioned', 'pending',
            'provisioned' or 'retired'.
        version:
          type: integer
          nullable: true
          format: int64
          minimum: 0
          description: >
            The version of the broker software the broker is running.
            A number containing an integer greater than or equal to zero.
    Broker:
      type: object
      properties:
        _cid:
          type: string
          readOnly: true
          description: >
            The primary identifier of a broker configuration.
            A string containing a broker cid.
          example: /broker/1
        _details:
          type: array
          readOnly: true
          description: >
            An array of details on every broker that is grouped together.
          example:
            [
              {
                "cn": "us1.noit.circonus.net",
                "name":"us1",
                "external_host": "example.circonus.net",
                "external_port": 8080,
                "ipaddress": "75.102.43.87",
                "minimum_version_required": 1367937537,
                "modules": ["cim", "circonuswindowsagent", "collectd", "dcm"],
                "port": null,
                "skew": "0.00257706642150879",
                "status": null,
                "version": 1370978917,
              },
            ]
          items:
            $ref: "#/components/schemas/BrokerDetails"
        _latitude:
          type: number
          readOnly: true
          format: double
          description: >
            The latitude of the broker.
            A floating point number indicating GPS location.
          example: "39.043"
        _longitude:
          type: number
          readOnly: true
          format: double
          description: >
            The longitude of the broker.
            A floating point number indicating GPS location.
          example: "-77.487"
        _name:
          type: string
          readOnly: true
          description: >
            The name of the broker.
            A string containing freeform text.
          example: Ashburn, VA, US
        _tags:
          type: array
          readOnly: true
          description: >
            The tags associated with this broker.
            An array of tags. The tags in the array are automatically sorted,
            de-duplicated and transformed into their lowercase canonical form.
          example: ["datacenter:primary", "foo:bar"]
          items:
            $ref: "#/components/schemas/Tag"
        _type:
          type: string
          readOnly: true
          description: >
            The type of broker, whether public or private.
            A string containing either 'circonus' (a cloud based broker run by
            Circonus) or 'enterprise' (an in-house enterprise broker).
          example: circonus
    CAQLResponse:
      type: object
      properties:
        _data:
          type: array
          items:
            type: integer
            # TODO - This rows another array after the integer but both are unnamed.  Difficult to express in swagger
            # type: array
        _end:
          type: integer
        _period:
          type: integer
        _query:
          type: string
        _start:
          type: integer
    Check:
      type: object
      properties:
        _cid:
          type: string
          readOnly: true
          description: >
            A string containing an check cid
          example: /check/1234
        _active:
          type: boolean
          readOnly: true
          description: >
            Is this check currently active and collecting data.
          example: true
        _broker:
          type: string
          readOnly: true
          description: >
            The broker on which the data is collected.
          example: /broker/1234
        _check_bundle:
          type: string
          readOnly: true
          description: >
            The ID of the bundle this check belongs to.
          example: /check_bundle/1234
        _check_uuid:
          type: string
          format: uuid
          readOnly: true
          description: >
            The UUID that universally identifies this check.
          example: f2622370-a9b9-404a-9368-396a8d7c6dc5
        _details:
          type: object
          nullable: true
          readOnly: true
          description: >
            A listing of possible check specific details. This is likely to be empty for most checks.
          example: {}
        _reverse_url:
          type: string
          readOnly: true
          description: >
            Reverse url
    CheckBundle:
      type: object
      properties:
        _cid:
          type: string
          readOnly: true
          description: >
            A string containing an check_bundle cid
          example: /check_bundle/1234
        _check_uuids:
          type: array
          items:
            type: string
            format: uuid
            example:
              - 36b5a748-5614-57f1-87e3-32ca709c9cac
              - 25b5a748-5614-44f1-87e3-32ca709c9c45
          readOnly: true
          description: >
            The check uuids for the checks that make up this check bundle.
        _checks:
          type: array
          items:
            type: string
            example:
              - /check/62513
              - /check/62514
          readOnly: true
          description: >
            The checks that make up this check bundle. Circonus automatically creates a corresponding check for each broker.
        _created:
          type: integer
          readOnly: true
          description: >
            The point in time when this object was created, expressed as the number of seconds since the UNIX epoch.
          example: 1382105011
        _last_modified:
          type: integer
          readOnly: true
          description: >
            The point in time when this object was last modified, expressed as the number of seconds since the UNIX epoch.
          example: 1382105011
        _last_modified_by:
          type: string
          readOnly: true
          description: >
            The object id of the last user to modify this object.
          example: /user/2345
        _reverse_connection_urls:
          type: array
          items:
            type: string
          readOnly: true
          description: >
            Experimental reverse client connection URLs. Subject to change
        brokers:
          type: array
          items:
            type: string
            example:
              - /broker/2
              - /broker/37
          description: >
            The brokers that are responsible for gathering the metrics. These can either be Circonus
            brokers running in the cloud or enterprise brokers running in your datacenter. A corresponding
            check will automatically be created for each broker. Note: When removing a broker from the
            array, it will remove a check from the check bundle. This will remove any RuleSets associated
            with that check.  If any rules that you remove are members of one or more Ruleset Groups, you
            will receive a response header: `X-Circonus-RuleSetGroupsModified` containing a comma-separated
            list of ruleset group ids affected. If you receive this response header, you should review those
            Ruleset Groups to make sure your formulas will still generate alerts when you want them to.
            Removing all brokers deactivates the check bundle.
        config:
          oneOf:
            - $ref: "#/components/schemas/CheckTypeCAQLConfig"
            - $ref: "#/components/schemas/CheckTypeCirconusWindowsAgentConfig"
            - $ref: "#/components/schemas/CheckTypeCloudwatchConfig"
            - $ref: "#/components/schemas/CheckTypeCollectdConfig"
            - $ref: "#/components/schemas/CheckTypeCompositeConfig"
            - $ref: "#/components/schemas/CheckTypeConsulConfig"
            - $ref: "#/components/schemas/CheckTypeDHCPConfig"
            - $ref: "#/components/schemas/CheckTypeDNSConfig"
            - $ref: "#/components/schemas/CheckTypeElasticSearchConfig"
            - $ref: "#/components/schemas/CheckTypeGangliaConfig"
            - $ref: "#/components/schemas/CheckTypeHaproxyConfig"
            - $ref: "#/components/schemas/CheckTypeHTTPConfig"
            - $ref: "#/components/schemas/CheckTypeHTTPApacheConfig"
            - $ref: "#/components/schemas/CheckTypeHTTPTrapConfig"
            - $ref: "#/components/schemas/CheckTypeIMAPConfig"
            - $ref: "#/components/schemas/CheckTypeJMXConfig"
            - $ref: "#/components/schemas/CheckTypeJSONConfig"
            - $ref: "#/components/schemas/CheckTypeJSONCouchDBConfig"
            - $ref: "#/components/schemas/CheckTypeJSONMongoDBConfig"
            - $ref: "#/components/schemas/CheckTypeJSONNadConfig"
            - $ref: "#/components/schemas/CheckTypeJSONRiakConfig"
            - $ref: "#/components/schemas/CheckTypeLDAPConfig"
            - $ref: "#/components/schemas/CheckTypeMemcachedConfig"
            - $ref: "#/components/schemas/CheckTypeMongoDBConfig"
            - $ref: "#/components/schemas/CheckTypeMySQLConfig"
            - $ref: "#/components/schemas/CheckTypeNewRelicRPMConfig"
            - $ref: "#/components/schemas/CheckTypeNginxConfig"
            - $ref: "#/components/schemas/CheckTypeNRPEConfig"
            - $ref: "#/components/schemas/CheckTypeNTPConfig"
            - $ref: "#/components/schemas/CheckTypeOpenTSDBConfig"
            - $ref: "#/components/schemas/CheckTypeOracleConfig"
            - $ref: "#/components/schemas/CheckTypePingICMPConfig"
            - $ref: "#/components/schemas/CheckTypePostgresConfig"
            - $ref: "#/components/schemas/CheckTypePrometheusConfig"
            - $ref: "#/components/schemas/CheckTypePromtextConfig"
            - $ref: "#/components/schemas/CheckTypeRedisConfig"
            - $ref: "#/components/schemas/CheckTypeResmonConfig"
            - $ref: "#/components/schemas/CheckTypeSMTPConfig"
            - $ref: "#/components/schemas/CheckTypeSNMPConfig"
            - $ref: "#/components/schemas/CheckTypeSNMPMomentumConfig"
            - $ref: "#/components/schemas/CheckTypeSQLServerConfig"
            - $ref: "#/components/schemas/CheckTypeSSH2Config"
            - $ref: "#/components/schemas/CheckTypeStatsdConfig"
            - $ref: "#/components/schemas/CheckTypeTCPConfig"
            - $ref: "#/components/schemas/CheckTypeVarnishConfig"
          description: >
            The configuration of the checks.  The keys and values are dependent on the check type (HTTP, DNS, JSON, etc.). You can refer to the specific type definitions to find the valid parameters and their accepted values.
        display_name:
          type: string
          description: >
            The name of the check that will be displayed in the web interface.
          example: Ping home router
        metric_filters:
          type: array
          items:
            $ref: "#/components/schemas/MetricFilter"
          description: >
            An array of one or more rules to 'allow' or 'deny' metrics with names matching the regular expression and stream tag query expression.
        # TODO - metric_filters had a bit more documentation in the old API docs, this needs a link to the full docs
        metric_limit:
          type: integer
          items:
            type: string
          description: >
            Setting a metric limit will tell the Circonus backend to periodically look at the check to see if there are additional metrics the broker has seen that we should collect. It will not reactivate metrics you had previously collected and then marked as inactive. Values are 0 to disable, -1 to enable all metrics or 1+ to collect up to that value (both -1 and 1+ can not exceed other account restrictions).
          example: 0
        metrics:
          type: array
          items:
            $ref: "#/components/schemas/MetricsObject"
          description: >
            Details on the metrics each check in this bundle gathers. If the query_broker=1 query parameter is passed this list will also
            include any additional metrics that are available for collection but are not currently active.
        notes:
          type: string
          nullable: true
          description: >
            Notes about this bundle
          example: Pinging the dynamic dns name for my home router
        period:
          type: integer
          minimum: 10
          maximum: 300
          default: 60
          description: >
            The period between each time the check is made.
          example: 60
        status:
          type: string
          enum:
            - active
            - disabled
          default: active
          description: >
            If the check is activate or disabled.
          example: active
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagProperty"
          description: >
            An array of tags. The tags in the array are automatically sorted, deduplicated and transformed into their lowercase canonical form.
        target:
          type: string
          description: >
            A string that is the hostname the check will contact to retrieve metrics, or the host that will be sending metrics to this check.
          example: myhomecomputer.no-ip.biz
        timeout:
          type: number
          minimum: 0
          maximum: 300
          default: 10
          items:
            $ref: "#/components/schemas/TagProperty"
          readOnly: true
          description: >
            The length of time in seconds before the check will timeout if no response is returned to the broker.  This can be a floating point number representing seconds and fractions of seconds.
        type:
          $ref: "#/components/schemas/CheckTypesEnum"
    CheckBundleMetrics:
      type: object
      properties:
        _cid:
          type: string
          readOnly: true
          description: >
            A string containing an check_bundle_metrics cid.  The numeric portion of this id matches that of the Check Bundle it refers to.
          example: /check_bundle_metrics/1234
        metrics:
          type: array
          items:
            $ref: "#/components/schemas/MetricsObject"
          description: >
            Details on the metrics each check in this bundle gathers.
    CheckMove:
      type: object
      required:
        - check_id
        - new_broker
      properties:
        _cid:
          type: string
          readOnly: true
          description: >
            A string containing an check_move cid.
          example: /check_move/1234
        _broker:
          type: string
          readOnly: true
          description: ID of Broker the check is currently on.
          example: /broker/1
        _error:
          type: string
          readOnly: true
          description: Text of any error encountered while trying to move the check.
          example: null
        _status:
          type: string
          readOnly: true
          description: Status of the current move request.
          example: Pending
        check_id:
          type: integer
          description: ID of the Check to be moved to a new Broker.
          example: 46883
        new_broker:
          type: string
          description: cid of Broker to move the check to.
          example: /broker/245
    ContactGroup:
      type: object
      required:
        - name
      properties:
        _cid:
          type: string
          readOnly: true
          description: >
            A string containing an contact_group cid.
          example: /contact_group/1234
        _last_modified:
          type: integer
          readOnly: true
          description: >
            Timestamp when the object was last updated.  This is the number of seconds since the UNIX epoch.
          example: 1382104711
        _last_modified_by:
          type: string
          readOnly: true
          description: >
            The object id of the last user to modify this object.
          example: /user/2345
        aggregation_window:
          type: integer
          minimum: 0
          description: >
            The aggregation window in seconds.  This affects what happens when multiple alerts want to notify
            the contact group in quick succession. Once the contact group has notified the contacts of an alert
            at a certain severity, for the next five minutes all notifications for that severity or lower will be
            stored up and dispatched as a single notification at the end of the five minute aggregation period.
            If during this window a higher severity alert is raised (i.e. one with a lower number, given that
            severity 1 is the highest severity alert) then the contact group will immediately notify the contacts.
          example: 300
        alert_formats:
          allOf:
            - $ref: "#/components/schemas/AlertFormat"
          description: The formatting of alert messages sent to this contact group when alerts occur.
        always_send_clear:
          type: boolean
          description: Send clear notifications even if the alert is in maintenance.
          example: true
        contacts:
          type: object
          description: The contacts in this contact group.
          properties:
            external:
              description: External contacts that do not have Circonus user accounts that should be contacted within this contact group.
              type: array
              items:
                $ref: "#/components/schemas/ExternalContactMember"
            users:
              description: Circonus users in this contact group.
              type: array
              items:
                $ref: "#/components/schemas/InternalContactMember"
        escalations:
          description: >
            The alerting system is able to escalate alerts to further contact groups if an alert sent to this
            contact group is not acknowledged or resolved.  This array of 5 items represents the settings for the
            5 severity levels in ascending order. Setting this field to a `null` value is equivalent to omitting
            the field.
          type: array
          nullable: true
          minItems: 5
          maxItems: 5
          items:
            $ref: "#/components/schemas/SeverityEscalationGroup"
        group_type:
          type: string
          description: >
            There are several types of contact groups, providing different functionality.
            The contact methods allowed vary by contact group type. Group types 'normal', 'escalation', and
            'oncall' can have contact methods 'email', 'sms', and 'http'. Group type 'opsgenie' can
            only have 'http' contact methods. Group types 'pagerduty', 'victorops', and 'slack' can only
            have contact methods that are the same as the group type.
          enum:
            - normal
            - escalation
            - opsgenie
            - oncall
            - pagerduty
            - slack
            - victorops
          example: "normal"
        name:
          type: string
          description: The contact group name.
          example: "Primary Oncall Group"
        reminders:
          type: array
          minItems: 5
          maxItems: 5
          items:
            type: integer
          description: >
            As part of the alerts system it is possible to get reminders sent after a configurable number
            of minutes for open alerts.  This array of 5 items represents the settings for the 5 severity
            levels in ascending order.
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagProperty"
          description: >
            An array of tags. The tags in the array are automatically sorted, deduplicated and transformed into their lowercase canonical form.
    CustomDashboard:
      type: object
      required:
        - name
      properties:
        _cid:
          type: string
          readOnly: true
          description: >
            A string containing an custom dashboard cid.
          example: /custom_dashboard/f1513f29-5b56-4623-bedb-a125bbc1caaa
        _custom_dashboard_uuid:
          type: string
          readOnly: true
          description: >
            The UUID for this custom dashboard.
          example: f1513f29-5b56-4623-bedb-a125bbc1caaa
        _created_on:
          type: integer
          readOnly: true
          description: >
            Timestamp when the object was created. This is the number of seconds since the UNIX epoch.
          example: 1382104711
        _created_by:
          type: string
          readOnly: true
          description: >
            The object id of the user who created this object.
          example: /user/2345
        _last_modified_on:
          type: integer
          readOnly: true
          description: >
            Timestamp when the object was last updated.  This is the number of seconds since the UNIX epoch.
          example: 1382104711
        _last_modified_by:
          type: string
          readOnly: true
          description: >
            The object id of the last user to modify this object.
          example: /user/2345
        title:
          type: string
          description: >
            The title of the custom dashboard.
          example: US-West Overview
        is_private:
          type: boolean
          description: Whether this dashboard is private or not. If it's private, it's only visible to and viewable by its creator.
          example: true
        is_active:
          type: boolean
          description: Whether this dashboard is active or not. If it's not active then it's been archived and is not visible in the main dashboards list.
          example: true
        dependencies:
          type: object
          description: >
            The dependencies property is used on system-dashboards only, not user-dashboards. It holds an object containing dependency name properties which are unique amongst all dependencies. Each dependency name property holds either an object or an array of objects containing info about an evaluation of an item which will affect content or visibility of elements on the page. Dependencies can evaluate metrics, filters, or selections. If an array of objects is specified, then when that dependency is evaluated each object is evaluated in order, unless a dependency evaluation failure occurs (in which case evaluation stops).
          additionalProperties:
            $ref: "#/components/schemas/CustomDashboardDependency"
        filters:
          type: object
          description: >
            The filters property is used on system-dashboards only, not user-dashboards. It holds an object containing filter name properties which are unique amongst all filters. Each filter name property holds an object containing info about how to filter one or more tab's contents. Filters are configurations which show dropdown menus in the top breadcrumb/date bar, to filter the elements shown on-screen, and they are recorded in the URL as parameters, so they are bookmarkable. Filters can be generated from a static list of values, or they can be generated dynamically from metric tags.
          additionalProperties:
            $ref: "#/components/schemas/CustomDashboardFilter"
        tabs:
          type: object
          description: >
            The tabs property value is an object containing tab name properties which are unique amongst all tabs. Each tab name property holds an object containing info about that tab and all of its widgets.
          additionalProperties:
            $ref: "#/components/schemas/CustomDashboardTab"
        synthetics:
            type: object
            description: >
              The synthetics property is used on system-dashboards only, not user-dashboards. It holds an object containing metric_key properties which are unique amongst all metric and synthetic keys. Each metric_key property holds an object containing info about how to generate and display that set of synthetic metrics. Synthetic metrics are metrics which are created by combining or transforming one or more standard metrics.
        _widgets:
          type: object
          readOnly: true
          description: >
            Holds an object containing widget UUID properties whose values are widget config objects. These widget UUIDs are referenced in the CustomDashboardTab widgets object to map the individual widgets to a position in a particular tab's layout. This field is read-only; widgets themselves are created/updated/deleted through the CustomDashboardWidget endpoint.
          additionalProperties:
            anyOf:
              - $ref: "#/components/schemas/CustomDashboardWidgetCountsGrid"
              - $ref: "#/components/schemas/CustomDashboardWidgetGraph"
              - $ref: "#/components/schemas/CustomDashboardWidgetHealthBar"
              - $ref: "#/components/schemas/CustomDashboardWidgetList"
              - $ref: "#/components/schemas/CustomDashboardWidgetSingle"
              - $ref: "#/components/schemas/CustomDashboardWidgetTable"
              - $ref: "#/components/schemas/CustomDashboardWidgetTileMap"
            discriminator:
              propertyName: widget_type
        _metrics: 
          type: object
          readOnly: true
          description: >
              Holds an object containing metric_key properties which are unique amongst all metric and synthetic keys (in user-dashboards, these keys are the CustomDashboardMetricQuery query_uuid properties). Each metric_key property holds an object (a “metric group”) containing info about how to find and display that set of metrics. This field is read-only; metric queries themselves are created/updated/deleted through the CustomDashboardMetricQuery endpoint.
          additionalProperties:
            $ref: "#/components/schemas/CustomDashboardMetricQuery"
        options:
          type: object
          description: >
            Holds an object containing various unspecified options like sharing configs.

    Dashboard:
      type: object
      properties:
        _cid:
          type: string
          readOnly: true
          description: A string containing a dashboard cid.
          example: /dashboard/1
        _active:
          type: boolean
          readOnly: true
          description: Whether the dashboard is active or not.
          example: true
        _created:
          type: integer
          readOnly: true
          description: >
            The point in time when this object was created, expressed as the number of seconds since the UNIX epoch.
          example: 1471885497
        _created_by:
          type: string
          readOnly: true
          description: >
            The cid of the user who created the dashboard.
          example: /user/2345
        _dashboard_uuid:
          type: string
          format: uuid
          readOnly: true
          description: Dashboard's unique UUID identifier.
          example: 64b16e8c-fe0f-4059-beff-8d4ccd25b32c
        _last_modified:
          type: integer
          readOnly: true
          description: >
            The point in time when this object was last updated, expressed as the number of seconds since the UNIX epoch.
          example: 1382104711
        account_default:
          type: boolean
          description: Whether the dashboard is the default for the current account.
          example: true
        grid_layout:
          allOf:
            - $ref: "#/components/schemas/DashboardGridLayout"
          description: Dashboard widget layout.
        options:
          allOf:
            - $ref: "#/components/schemas/DashboardOptions"
          description: Display options for Dashboard widgets.
        shared:
          type: boolean
          description: Whether the dashboard is shared; if "false", this is a private dashboard.
          example: true
        title:
          type: string
          description: Title of the dashboard.
          example: Recent Graphs and Test Graph
        widgets:
          type: array
          items:
            $ref: "#/components/schemas/DashboardWidget"
          description: Array of the widgets on the dashboard.
    Data:
      type: object
      properties:
        _cid:
          type: string
          readOnly: true
          description: >
            A string containing an data cid.
          example: /data/1234_cpu
        data:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/DataNumericLegacyFormat"
              - $ref: "#/components/schemas/DataNumericTupleArray"
              - $ref: "#/components/schemas/DataNumericObjectObject"
              - $ref: "#/components/schemas/DataHistogramArray"
              - $ref: "#/components/schemas/DataTextArray"
          description: >
            The data stored in circonus for the requested query.
    # TODO - all the Graph and Graph Subobjects need links to the Circonus docs for the concepts
    # TODO - especially the Data Formula fields.  This had more detail in the old API docs that doesn't work well here.  Needs a link.
    # TODO - Also "overlays".  Theres a several-page set of JSON examples that just got dumped into the old API docs.
    Graph:
      type: object
      required:
        - access_keys
        - composites
        - datapoints
        - title
      properties:
        _cid:
          type: string
          readOnly: true
          description: >
            A string containing an graph cid
          example: /graph/ba575c89-77bd-4356-a242-58eb3f1b48a8
        access_keys:
          type: array
          items:
            $ref: "#/components/schemas/GraphAccessKey"
          description: >
            Access keys allow non Circonus users to view your graphs via standalone link or embeddable URL. Various options allow for full control of a graph or a locked down view.
        composites:
          type: array
          items:
            $ref: "#/components/schemas/GraphComposite"
          deprecated: true
          description: >
            The composite metrics that are displayed on the graph.  Composites are deprecated, so this should be an empty array.
        datapoints:
          type: array
          items:
            $ref: "#/components/schemas/GraphDataPoint"
          description: >
            Details about the metrics that are rendered on this graph.
        description:
          type: string
          description: >
            Description of what the graph is for
          example: Time to first byte verses time to completed payload
        guides:
          type: array
          items:
            $ref: "#/components/schemas/GraphGuide"
          description: >
            A listing of possible check specific details. This is likely to be empty for most checks.
          example: {}
        line_style:
          type: string
          enum:
            - stepped
            - interpolated
            -
          description: >
            How the line should change between points.
        logarithmic_left_y:
          type: string
          nullable: true
          default: null
          description: >
            The logarithmic base to use for the left axis.  An integer encoded as a string.  The default value of null, sets the left axis to a linear scale.
          example: "10"
        logarithmic_right_y:
          type: string
          nullable: true
          default: null
          description: >
            The logarithmic base to use for the right axis.  An integer encoded as a string.  The default value of null, sets the right axis to a linear scale.
          example: "2"
        max_left_y:
          type: string
          nullable: true
          default: null
          description: >
            Maximum value on the left axis.  A number encoded as a string.  If left null the graph will attempt to auto-scale the left axis based on the data.
          example: "90000"
        max_right_y:
          type: string
          nullable: true
          default: null
          description: >
            Maximum value on the right axis.  A number encoded as a string.  If left null the graph will attempt to auto-scale the right axis based on the data.
          example: null
        metric_clusters:
          type: array
          items:
            $ref: "#/components/schemas/GraphMetricCluster"
          deprecated: true
          description: >
            The metric clusters that should be displayed on the graph.
        min_left_y:
          type: string
          nullable: true
          default: null
          description: >
            Minimum value on the left axis.  A number encoded as a string.  If left null the graph will attempt to auto-scale the left axis based on the data.
          example: "80000"
        min_right_y:
          type: string
          default: null
          nullable: true
          description: >
            Minimum value on the right axis.  A number encoded as a string.  If left null the graph will attempt to auto-scale the right axis based on the data.
          example: null
        notes:
          type: string
          nullable: true
          description: >
            A place for storing notes about this graph.
          example: This graph shows just the main webserver.
        overlay_sets:
          type: object
          nullable: true
          description: >
            Collection of Sets of Overlays;  This field may be null.
          # TODO - link to overlaly docs
        style:
          type: string
          enum:
            - area
            - line
            -
          nullable: true
          default: null
          description: >
            How the graph should be rendered
          example: line
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagProperty"
          description: >
            An array of tags. The tags in the array are automatically sorted, deduplicated and transformed into their lowercase canonical form.
        title:
          type: string
          description: >
            The title of the graph
          example: Slow Webserver
    Maintenance:
      type: object
      required:
        - item
        - type
      properties:
        _cid:
          type: string
          readOnly: true
          description: >
            A string containing an maintenance cid.
          example: /maintenance/1234
        item:
          type: string
          # TODO - move these into defined objects
          description: >
            The identifier for the item under maintenance.  Must correspond to the type, i.e. an account cid of the
            form '/account/1234' for an account maintenance, a rule set cid of the form '/rule_set/12345'
            for a rule set maintenance, a host name like 'www3.internal.example.com' for a host maintenance, a check
            cid of the form '/check/1234' for a check maintenance.
          example: www2.internal.example.com
        notes:
          type: string
          description: User notes for the maintenance
          example: Internal shutdown for hardware upgrade.
        severities:
          description: >
            The severities that are prevented from being triggered due to this maintenance window. Alerts of
            severities not included will still be triggered.
          oneOf:
            - $ref: "#/components/schemas/SeveritiesAsString"
            - $ref: "#/components/schemas/SeveritiesAsArray"
          default: [1, 2, 3, 4, 5]
        start:
          type: integer
          description: When the maintenance window starts, expressed as number of seconds since UNIX epoch.
          default: the current epoch time
          example: 1579187990
        stop:
          type: integer
          description: When the maintenance window starts, expressed as number of seconds since UNIX epoch.  Must be greater than the start time.
          default: 5 minutes (300 seconds) after the start
          example: 1579188290
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagProperty"
          description: >
            An array of tags. The tags in the array are automatically sorted, deduplicated and transformed into their lowercase canonical form.
        type:
          type: string
          enum:
            - account
            - rule_set
            - check
            - host
          description: >
            A field that describes the thing that is undergoing maintenance.  By setting an account under
            maintenance, this covers everything for the account.  A host, would include all rule sets for
            any checks that have that host as a target.   A check, would included all rulesets for metrics
            on that check.  A rule_set, only applies to that one rule_set.
          example: host
    Metric:
      type: object
      properties:
        _cid:
          type: string
          readOnly: true
          description: >
            A string containing an metric cid.  This is the `/metric/<check_id>_<metric_name>`.
          example: /metric/4373_tt_firstbyte
        _active:
          type: boolean
          readOnly: true
          description: >
            Indicates whether data has been collected for this metric within the active time window. The default
            time window is the last 8 hours. The active window can be specified by setting the active_start and
            active_end query parameters.
          example: true
        _check_broker:
          type: string
          readOnly: true
          description: Name of the broker that handles the Check which collects this metric.
          example: Ashburn, VA, US
        _check:
          type: string
          readOnly: true
          description: CID of the Check which collects this metric.
          example: /check/1234
        _check_active:
          type: boolean
          readOnly: true
          description: If the Check containing this metric is active or not.
        _check_bundle:
          type: string
          readOnly: true
          description: >
            The CID of the bundle this check belongs to.
          example: /check_bundle/1234
        _display_name:
          type: string
          readOnly: true
          description: >
            The display name of the check which collects this metric.
          example: "Example Check"
        _check_module:
          type: string
          readOnly: true
          description: The module used by the Check which collects this metric.
          example: smtp
        _check_tags:
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/TagProperty"
          description: >
            An array of tags. The tags in the array are automatically sorted, deduplicated and transformed into their lowercase canonical form.
        _check_target:
          type: string
          readOnly: true
          description: The target server of the Check which collects this metric.
          example: myhomecomputer.no-ip.biz
        _check_uuid:
          type: string
          format: uuid
          readOnly: true
          description: >
            The UUID that universally identifies this check.
          example: f2622370-a9b9-404a-9368-396a8d7c6dc5
        _histogram:
          type: string
          enum:
            - active
            - inactive
            - false
          readOnly: true
          description: Whether data on this metric is collected in histogram form.
          example: false
        _metric_name:
          type: string
          readOnly: true
          description: The name of the metric.
          example: tt_firstbyte
        _metric_type:
          type: string
          # TODO - this should be an enum, but the docs only show 'numeric' and 'text'.  What about histogram?
          readOnly: true
          description: The type of values the metric returns.
          example: numeric
        _status:
          type: string
          enum:
            - active
            - available
          readOnly: true
          description: Indicates whether this metric has been set to actively collect data or is available to collect data but is not currently enabled.
          example: active
        link:
          type: string
          deprecated: true
          description: Links are part of rulesets now.
        notes:
          type: string
          deprecated: true
          description: Notes are part of rulesets now.
        tags:
          type: array
          deprecated: true
          items: {}
          description: Metrics no longer have tags.  Deprecated in favor of stream tags (which are part of their canonical name).
          example: []
        units:
          type: string
          deprecated: true
          description: The unit of measurement the metric represents (e.g., bytes, seconds, milliseconds). Changes to the 'units' value will be applied to the same metric across all Checks in the same CheckBundle.
          example: milliseconds
    ProvisionBroker:
      type: object
      properties:
        _cid:
          type: string
          readOnly: true
          description: The primary identifier of a provisioning object.  This is the common name (cn) of the broker.
          example: a406-n291781
        _cert:
          type: string
          readOnly: true
          description: Current certificate of the broker.
          example: >
            -----BEGIN CERTIFICATE-----
            MIIFGDCCBACgAwIBAgICEHkwDQYJKoZIhvcNAQELBQAwgbUxCzAJBgNVBAYTAlVT
            MREwDwYDVQQIEwhNYXJ5bGFuZDEPMA0GA1UEBxMGRnVsdG9uMRswGQYDVQQKExJD
            aXJjb251cyBEZXYsIEluYy4xFTATBgNVBAsTDENpcmNvbnVzIERldjErMCkGA1UE
            ...snip...
            y8Yq/x78N4l6wvBgNZyu6NkkY0UZ5NKX/ZjIJRxVnx9XqrPE/kYbxaU1yHyRXrQH
            YzRYxHoUrJaSqbnL
            -----END CERTIFICATE-----
        _stratcons:
          type: array
          readOnly: true
          description: List of stratcons for the broker.
          items:
            type: object
            properties:
              cn:
                type: string
                description: Common name of stratcon node.
              host:
                type: string
                description: Hostname of the stratcon node.
              port:
                type: string
                description: Port of the stratcon node.
        assert_status:
          type: string
          description: >
            Fail if broker status is different than expected.
            Prevents modifying an unprovisioned slot which was claimed by a parallel request.
            A string containing either 'active', 'unprovisioned', 'pending', 'provisioned' or 'retired'.
          example: 'unprovisioned'
        cluster_id:
          type: integer
          description: >
            Add the broker to an existing cluster/group.  Brokers are initially in a cluster of just
            themself.  They may then join another existing cluster.  Once a broker has joined another
            cluster, it cannot leave that cluster.
          example: 1234
        cluster_ip:
          type: string
          format: ipv4
          description: IP address accessible to peer cluster nodes.
          example: 10.0.0.1
        cluster_name:
          type: string
          description: Join or create a named cluster.
          example: us-east
        csr:
          type: string
          description: CSR of the broker.
          example: >
            -----BEGIN CERTIFICATE REQUEST-----
            MIICsjCCAZoCAQAwbTELMAkGA1UEBhMCVVMxETAPBgNVBAgMCE1hcnlsYW5kMQ8w
            DQYDVQQHDAZGdWx0b24xETAPBgNVBAoMCENpcmNvbnVzMScwJQYDVQQDDB5hNDA2
            ...snip...
            K1lGjqhL/cQUJdEXjYnZzxsv5sqn13S7nFitgvrhDp6YhC2dB2D+5TbyP2V3SHfM
            mrWqlmmxcmAEHgBByb7K5k2n2PC7Rg==
            -----END CERTIFICATE REQUEST-----
        external_host:
          type: string
          description: Public facing name for the broker.
          example: broker5.example.com
        external_port:
          type: string
          description: Public facing port for the broker.
          example: 43191
        ipaddress:
          type: string
          format: ipv4
          description: >
            IP address of the broker.  Changing the IP address will notify systems that the IP has
            changed and clear any alerts associated with the old IP.
          example: 10.0.0.1
        latitude:
          type: string
          description: Latitude for the broker.
        longitude:
          type: string
          description: Longitude for the broker.
        noit_name:
          type: string
          description: Optional name for the broker.
        prefer_reverse_connection:
          type: boolean
          description: >
            Prefer a reverse connection.  If true, the broker is responsible for reaching out to create a
            connection.  If false, stratcon is responsible for reaching out to the broker's ipaddress, which
            must be reachable.
        rebuild:
          type: boolean
          description: >
            If a rebuild of checks is scheduled to be performed on this broker.  Setting this parameter to true
            tells the system to mark this broker for reconsitute. The broker must be in active status to issue a rebuild.
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagProperty"
          description: >
            An array of tags. The tags in the array are automatically sorted, deduplicated and transformed into their lowercase canonical form.
    RuleSet:
      type: object
      required:
        - check
        - metric_name
        - metric_type
        - rules
      properties:
        _cid:
          type: string
          readOnly: true
          description: >
            A string containing an rule set cid
          example: /rule_set/1234
        _host:
          type: string
          readOnly: true
          description: The hostname or IP that the check for this ruleset gets its data from.
          example: acme.example.com
        check:
          type: string
          description: The ID of the check which collects the metric this ruleset is defined for.
          example: /check/1234
        contact_groups:
          $ref: "#/components/schemas/SeverityToContactGroupMapping"
        derive:
          type: string
          deprecated: true
          enum:
            - average
            - stddev
            - derive
            - derive_stddev
            - counter
            - counter_stddev
            - mixed
          nullable: true
          items:
            type: string
          description: >
            NOTE: This field is no longer used and can be ignored.   The return value is still returned but
            will be removed in a future version of the API.
            A summary of the windowing_function used in each rule. If you pass this field it will provide a
            default value for the windowing_function for each rule that you pass that doesn't otherwise have
            a windowing_function passed in that rule defintion. When read this field contains the name of the
            windowing_function used in the ruleset if and only if all rules use the same windowing_function.
            If more than one windowing function is used this field will read 'mixed', and if no rules are
            defined in this ruleset it will have a null value.
          example: null
        filter:
          type: string
          description: Tag filter expression. https://www.irondb.io/docs/tag-queries.html
          example: and(not(env:dev),__check_target:*-aws-*)
        link:
          type: string
          description: A link to external documentation (or anything else important) for this metric that will show up in email alerts and in the Circonus UI.
          example: http://example.com/how2fix/webserver_down.html
        metric_name:
          type: string
          description: The name of the metric this ruleset is defined for.
          example: tt_firstbyte
        metric_pattern:
          type: string
          description: A regex pattern to match on rather than using metric_name.  Typically used in conjunction with a tag `filter`.
          example: ^duration$
        metric_tags:
          deprecated: true
          type: array
          items:
            $ref: "#/components/schemas/TagProperty"
          description: >
            An array of tags. The tags in the array are automatically sorted, deduplicated and transformed into their lowercase canonical form.
        metric_type:
          type: string
          enum:
            - numeric
            - text
          description: The type of values the metric returns.
          example: numeric
        name:
          type: string
          description: Optional name to display instead of check and metric / pattern+filter. Short and unique names work best.
          example: webserver response
        notes:
          type: string
          description: Any notes on how to recover alerts for this metric, or anything you feel is important to convey to any responders to alerts. These notes show up in the Circonus UI.
          example: Determine if the HTTP request is taking too long to start (or is down.)  Don't fire if ping is already alerting.
        parent:
          type: string
          description: The cid of the parent for this ruleset. If the parent is in a severity 1 status alerts for its children will be silenced until it clears.  For backwards compatibility, the previous form of "<check_id>_<metric_name>" may still be used to specify a ruleset, but this form is deprecated and cannot be used for pattern-based rulesets.
          example: /rule_set/1234
        lookup_key:
          type: string
          description: Experimental, for Internal use.
        rules:
          type: array
          description: >
            The rules used to evaluate the metric. Rules are assessed in order until the first matching rule is
            determined.  Care should be taken to ensure that the rules make sense. In particular:  Consider an "on
            absence" rule, if for any reason the metric can't be collected; without this, a down website will not
            trigger an alert for an HTTP check with a "duration > value" rule alone.  Also verify the rules make
            sense when evaluated in the order they're listed. The first matching rule stops all further evaluation.
            Consider a case where a low priority rule is ahead of a high priority rule.  They both would be triggered
            by a particular event. The high priority rule will never trigger in that situation because the low priority
            rule is first in the list, and so is evaluated first, and triggered.
          items:
            type: object
            properties:
              criteria:
                type: string
                description: >
                  The criteria Circonus should evaluate the metric on to determine if the ruleset is faulting.  A string
                  containing either 'match', 'does not match', 'contains' or 'does not contain' for a text metric, 'min value'
                  or 'max value' for a numeric metric, or 'on change' or 'on absence' for either a numeric or text metric.
                enum:
                  - match
                  - does not match
                  - contains
                  - does not contain
                  - min value
                  - max value
                  - on change
                  - on absence
              severity:
                type: integer
                minimum: 1
                maximum: 5
                description: The severity of alert the alert should raise (and by implication, which of the contact groups in contact_groups should be contacted).
              value:
                oneOf:
                  - type: string
                  - type: number
                description: The value the criteria will compare the metric value against.  A string or number to compare against. For an 'on absence' rule this is the number of seconds the metric must not have been collected for, and should not be lower than the period and timeout of the metric being collected.
              wait:
                type: integer
                minimum: 0
                description: The number of minutes the system should wait before contacting the contact groups after this ruleset has faulted.
              windowing_duration:
                type: integer
                nullable: true
                description: The time, in seconds, over which windowing is applied (or null when no windowing).
              windowing_min_duration:
                type: integer
                nullable: true
                minimum: 0
                description: The minimum time, in seconds, of the windowing_duration, that must be filled in before we consider evaluating the rule.  This value must be >= 0, and <= the windowing_duration amount.  For text metrics, this is not used and may be passed in as null, or 0.
              windowing_function:
                allOf:
                  - $ref: "#/components/schemas/FunctionsEnum"
                nullable: true
                description: >
                  The type of windowing to perform (or null when no windowing).  Often it is not desired to alert immediately when
                  something reachs an arbitrary limit, but only if it changes too quickly. Circonus supports a selection of "windowing
                  functions" that can be used to monitor rate of change over a given duration of time.  For example, to check that
                  orders being canceled doesn't change by more than five over a five minute period:  { value: 5,  wait: 0,
                  windowing_duration: 300, windowing_function: 'derive' }
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagProperty"
          description: >
            An array of tags. The tags in the array are automatically sorted, deduplicated and transformed into their lowercase canonical form.
    RuleSetGroup:
      type: object
      required:
        - formulas
        - name
        - rule_set_conditions
      properties:
        _cid:
          type: string
          readOnly: true
          description: >
            A string containing an rule set group cid
          example: /rule_set_group/1234
        contact_groups:
          $ref: "#/components/schemas/SeverityToContactGroupMapping"
        formulas:
          type: array
          description: >
            What combination of rule set conditions described in the rule_set_conditions field must be met for this
            rule set group to raise an alert.  Ordering matters; Each formula will be evaluated in turn and the first
            matching one will raise the specified severity alert.
          items:
            type: object
            properties:
              expression:
                oneOf:
                  - type: number
                  - type: string
                description: >
                  An expression that describes the combination of conditions in rule_set_conditions that must be met
                  for this rule set group to itself generate an alert.  The expression has two possible forms. The
                  first of these, an integer number, indicates a simple threshold - an alert will fire if at least this
                  many of the rule_set_conditions are met. The second, more complex form, allows you to specify an exact
                  combination of the rule_set_conditions with lowercase "and", "or", "not" and brackets and uppercase
                  letters "A", "B", "C", etc corresponding to the respective first, second, third, etc rule_set_conditions.
                example: (A and B) and not C
              raise_severity:
                type: integer
                minimum: 1
                maximum: 5
                description: The severity alert that will be raised if the expression matches.
              wait:
                type: integer
                minimum: 0
                description: The number of minutes to wait before contacting configured groups about this alert.
          example:
            [
              { expression: "(A and B) and not C", raise_severity: 2, wait: 0 },
              { expression: 3, raise_severity: 1, wait: 5 },
            ]
        name:
          type: string
          description: The name of the rule set group.
          example: Multiple webservers gone bad
        rule_set_conditions:
          type: array
          description: >
            The conditions that are evaluated as part of this group, i.e. the rule sets and severities that the
            expressions in the formula field will be evaluated against to determine if this rule set group should
            raise an alert itself.  The order of the conditions is important in so much that the first condition
            will be condition 'A' in complex expressions, the second will be 'B', the third 'C' and so on.
          items:
            type: object
            properties:
              matching_severities:
                description: >
                  The possible severities that the rule set must be alerting at in order for this condition to be met.
                oneOf:
                  - $ref: "#/components/schemas/SeveritiesAsString"
                  - $ref: "#/components/schemas/SeveritiesAsArray"
              rule_set:
                type: string
                description: The rule set cid that must be generating an alert for the condition to be met.
                example: /rule_set/1234
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagProperty"
          description: >
            An array of tags. The tags in the array are automatically sorted, deduplicated and transformed into their lowercase canonical form.
    Snapshot:
      type: object
      properties:
        _image:
          type: string
          readOnly: true
          description: The base64-encoded PNG image data.
          example: ... base64-encoded PNG image data ...
        _key:
          type: string
          readOnly: true
          description: The access key of the shared resource.
          example: JMbcvC
        _type:
          allOf:
            - $ref: "#/components/schemas/SnapshotTypesEnum"
          readOnly: true
        _uuid:
          type: string
          format: uuid
          readOnly: true
          description: The uuid of the shared resource
          example: 36b5a748-5614-57f1-87e3-32ca709c9cza
    Tag:
      type: object
      properties:
        _cid:
          type: string
          readOnly: true
          description: >
            A string containing an tag cid.  The id is the full tag pair.
          example: /tag/datacenter:newyork
    User:
      type: object
      properties:
        _cid:
          type: string
          readOnly: true
          description: >
            A string containing an user cid
          example: /user/1234
        contact_info:
          type: object
          description: Additional contact info for the user that may be used to contact the user when alerts are triggered.
          properties:
            sms:
              type: string
              description: A 'telephone' number the user can receive text messages on (i.e. a MSISDN).
              example: "2008675309"
            xmpp:
              type: string
              deprecated: true
            victorops:
              type: string
              description: A VictorOps user ID value.
        email:
          type: string
          format: RFC822 email
          description: The user's email address. The email address must conform to RFC822 and contain a fully qualified domain name.
          example: contactme@example.com
        firstname:
          type: string
          description: The user's given name.
          example: Gordon
        lastname:
          type: string
          description: The user's family name.
          example: Robinson
    Worksheet:
      type: object
      properties:
        _cid:
          type: string
          readOnly: true
          description: >
            A string containing a worksheet cid
          example: /worksheet/2ea0ca3a-b317-429f-9507-d0ee6c31e3c1
        description:
          type: string
          description: Description of what the worksheet is for.
          example: Web Farm Overview
          nullable: true
        favorite:
          type: boolean
          description: Mark (star) this worksheet as a favorite.
          example: true
        graphs:
          type: array
          description: The graphs that compose this worksheet.
          items:
            type: object
            properties:
              graph:
                type: string
                description: cid of the graph to be included in this worksheet.
                example: /graph/5db480d2-f79d-4d4e-95ba-56bb2266a2f1
        notes:
          type: string
          description: A place to store notes about this worksheet.
          example: Currently maintained by Oscar.
          nullable: true
        smart_queries:
          type: array
          description: The smart queries that will be executed when displaying this worksheet.  Smart queries allow you to set a search term for graphs that will be automatically included in the worksheet.
          items:
            type: object
            properties:
              name:
                description: The name (heading) for the smart graph section in the worksheet.
                type: string
                example: Virtual Machines
              query:
                type: string
                description: A search string that will be evaluated to automatically include matching graphs.
                example: virtual
              order:
                type: array
                items:
                  type: string
                  description: A graph cid
                  example: /graph/d75f3727-313c-427b-ab6b-a1f6f39643a4
                description: >
                  A list controlling the order in which graphs are displayed.  The search query will be run,
                  and then any that match one of the items in the order list, will be placed accordingly.  Remaining
                  graph results will be placed at the end.  Remaining un-matched graphs in the order list are ignored.
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagProperty"
          description: >
            An array of tags. The tags in the array are automatically sorted, deduplicated and transformed into their lowercase canonical form.
        title:
          type: string
          description: The title of the worksheet.  Graph titles must be unique across the account.
          example: Primary Datacenter Server Graphs
tags:
  - name: Authentication
    description: >
      <p>In order to access the Circonus API you must authenticate with a valid API token and App Name. There are two ways to achieve this, using basic authentication or custom Circonus headers.</p>
      <p><h4>Custom Circonus Headers</h4></p>
        <pre><code>X-Circonus-Auth-Token: [TOKEN STRING]
      X-Circonus-App-Name: [APP NAME]</code></pre>
        <p><h4>Basic Authentication</h4></p>
        <p>Standard basic authentication may also be used. The App Name should be the username, and the API token should be the password. Curl makes this simple:</p> 
        <pre><code>curl --user ExampleApp:A80BCD8F-F9A0-4264-BA68-1DCF5C0A98F2 \
          --request GET \
          --url https://api.circonus.com/v2/user/current</code></pre>
        <p>as do most graphical web browsers. However, be careful to use "Incognito" or "Private Browsing" mode to prevent them from caching your credentials and exposing you to cross site scripting attacks.</p>
  - name: Account
    description: >
      Provides API access to the Circonus account itself. Allows you to alter the basic contact details associated with the account and description of the account, the timezone used in the user interface, and control user access to the account.  Accounts can only be created or closed by site administrators.
  - name: Acknowledgement
    description: >
      An acknowledgement represents a single acknowledgement of an alert. Each acknowledgement has a defined start and end point during which the alert is considered acknowledged.  Acknowledgements cannot be deleted however their 'acknowledged_until' can be changed to expire them.
  - name: Alert
    description: >
      Representation of an Alert that occurred. Currently this endpoint will only return active (i.e. not cleared or historical) alerts.
      Alerts are read only.  It's not possible to directly modify or create new alerts with the API or Circonus GUI. You can only close
      an alert by either resolving/changing the external stimulus that Circonus is checking or by altering the rules/thresholds Circonus uses.
      Circonus does not offer a way to manually input historic or synthetic results into its system (you should consider using
      annotations instead).
  - name: Annotation
    description: >
      Annotations allow you to mark important events on your account. They are displayed above graphs in the annotations bar, where you can
      choose which categories of annotations you want shown, and help in correlation of events across the systems / business.
  - name: Broker
    description: >
      The Broker service provides access to configuration information about brokers servers.
  - name: CAQL
    description: >
      The CAQL API endpoint provides a way to extract data from Circonus using a CAQL query.
  - name: Check
    description: >
      Checks are the individual elements of a check bundle. They consist of a configuration running on a specific broker. Checks are read only, to make a change to one you must do so through the check_bundle endpoints.
  - name: Check Bundle
    description: >
      Check bundles are what you configure to get your data into the system. A bundle is a collection of checks with the same configuration and target; differing only by the broker they are collected from.  Changing the bundle effects all the associated checks. The individual checks in the bundle have their own unique IDs for reference/use elsewhere.
  - name: Check Bundle Metrics
    description: >
      Add or remove individual metrics under a Check Bundle rather than replacing the entire Check Bundle object.
  - name: Check Move
    description: >
      Use this API to request that a Check be moved from one Broker to another. You can also check the status of existing move requests and update or delete them.<br/><br/> Move requests will be acted on at the top of each minute.<br/><br/> For a Check move to be successful, both Brokers must be up and running when the move is attempted. If one or both Brokers isn't running, the move will be tried again in the next minute and so on. <br/><br/> If an error occurs during a move attempt, the request will be preserved, but it won't be acted on again until the error is fixed and the request is updated.
  - name: Contact Group
    description: >
      Contact groups are your means of being notified about alerts. Each group can have one to many users and means of contact. If Bob wants to be alerted via SMS and Email, Sally wants an IM, and the SA team wants an email to a shared account, this is all setup in the contact group. Once a contact group is created you associate it with a rule_set to be alerted when a rule is violated.
  - name: Dashboard
    description: >
      Provides API access for creating, reading, updating and deleting Dashboards.<br/><br/> Note: This is currently a beta API endpoint and is subject to change without notice.<br/><br/> Because Dashboard objects can be fairly complex, the easiest way to understand their composition is to first create one via the UI and then click the "View API object" link and examine the contents.
  - name: Data
    description: >
      The data extraction API is a (beta) read only endpoint to pull the values of a single data point for a given time range.
  - name: Graph
    description: >
      Graphs are the workhorse of visualizations in the system. This endpoint allows mass creation, editing and removal of graphs. Unlike other systems graphs do not store the data with them, so a graph created today or a month from now will still show the same data.
  - name: Maintenance
    description: >
      Schedule a maintenance window for your account, check, rule set or host.
  - name: Metric
    description: >
      Provides API access to individual Metrics. Fields are generally read-only.  They are configurable through the `Check Bundle` endpoints.
  # - name: Metric Cluster
  #    description: >
  #      A metric cluster is a cluster of metrics defined by a set of queries.
  # PURPOSELY NOT DOING THIS ONE.  They have been deprecated a while now.  Leaving them out.
  - name: Provision Broker
    description: >
      The broker instance endpoint allows you to provision a broker given its ip, port,
      and certificate.  You must have an available broker slot to provision a broker.  Speak
      to customer service, or your Circonus operator to have a slot enabled for the account.
  - name: Rule Set
    description: >
      Rule sets let you define a collection of rules to apply to a given metric (or metrics which match a given pattern.) The rules are processed in order, and the first one to be found in violation generates an alert, stopping further processing. Each rule has a severity which links to a contact group or groups to be notified about the alert.
  - name: Rule Set Group
    description: >
      Rule Set Groups allow you to group together rule sets and trigger alerts based on combinations of those rule sets faulting; for example, triggering a further alert if a certain number of the rule sets themselves are faulting or if an explicit combination of the rulesets are in a specific fault state.
  - name: Snapshot
    description: >
      The Snapshot API endpoint allows you to retrieve PNG images of shared resources such as shared graphs, shared dashboards, and shared worksheets. Use this API with a GET call including query parameters that describe the shared resource. The response will include a base64-encoded PNG image of the shared page as it appeared at the time of the request.<br/><br/> Note: This is currently a beta API endpoint and is subject to change without notice.<br/><br/> Note: Currently, Dashboard widgets configured for streaming data will appear as blank widgets on shared Dashboard images.
  - name: Tag
    description: >
      List all tags in use on the account.  Tags cannot be added with these endpoints; instead they
      should be added to the individual objects, which will autocreate them. Tags are also not
      updateable as they have no properites; they can only be deleted.
  - name: User
    description: >
      Get basic information about the users on the account.  Users cannot be created or deleted
      directly.  They can be invited to, or removed from an account by modifying the `invites`
      or `users` fields on the `Account` endpoints.
  - name: Worksheet
    description: >
      Worksheets are simply a collection of graphs for organizational purposes or to allow quick correlation across them.
